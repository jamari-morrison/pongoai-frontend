/**
 * Ordered style buckets using their short pseudo name.
 *
 * @private
 */
export var styleBucketOrdering = [// catch-all
'd', // link
'l', // visited
'v', // focus-within
'w', // focus
'f', // focus-visible
'i', // hover
'h', // active
'a', // keyframes
'k', // at-rules
't'];
/**
 * Lazily adds a `<style>` bucket to the `<head>`. This will ensure that the style buckets are ordered.
 */

export function getStyleSheetForBucket(bucketName, target, renderer) {
  if (!renderer.styleElements[bucketName]) {
    var currentBucketIndex = styleBucketOrdering.indexOf(bucketName) + 1;
    var nextBucketFromCache = null; // Find the next bucket which we will add our new style bucket before.

    for (; currentBucketIndex < styleBucketOrdering.length; currentBucketIndex++) {
      var nextBucket = renderer.styleElements[styleBucketOrdering[currentBucketIndex]];

      if (nextBucket) {
        nextBucketFromCache = nextBucket;
        break;
      }
    }

    var tag = target.createElement('style');
    tag.dataset.makeStylesBucket = bucketName;
    renderer.styleElements[bucketName] = tag;
    target.head.insertBefore(tag, nextBucketFromCache);
  }

  return renderer.styleElements[bucketName].sheet;
}
//# sourceMappingURL=getStyleSheetForBucket.js.map