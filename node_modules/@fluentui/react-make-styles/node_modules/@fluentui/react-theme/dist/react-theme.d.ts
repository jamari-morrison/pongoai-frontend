export declare type BorderRadiusTokens = {
    borderRadiusNone: string;
    borderRadiusSmall: string;
    borderRadiusMedium: string;
    borderRadiusLarge: string;
    borderRadiusXLarge: string;
    borderRadiusCircular: string;
};

export declare type BrandVariants = ColorVariants & {
    shade60: string;
};

declare type ColorPaletteT<Color extends string> = `colorPalette${Color}Background1` | `colorPalette${Color}Background2` | `colorPalette${Color}Background3` | `colorPalette${Color}Foreground1` | `colorPalette${Color}Foreground2` | `colorPalette${Color}Foreground3` | `colorPalette${Color}BorderActive` | `colorPalette${Color}Border2`;

/**
 * Design tokens available for shared colors
 */
export declare type ColorPaletteTokens = Record<ColorPaletteT<GlobalSharedColorsT>, string>;

/**
 * Design tokens for alias colors
 */
export declare type ColorTokens = {
    colorNeutralForeground1: string;
    colorNeutralForeground2: string;
    colorNeutralForeground2Hover: string;
    colorNeutralForeground2Pressed: string;
    colorNeutralForeground2Selected: string;
    colorNeutralForeground2BrandHover: string;
    colorNeutralForeground2BrandPressed: string;
    colorNeutralForeground2BrandSelected: string;
    colorNeutralForeground3: string;
    colorNeutralForeground3Hover: string;
    colorNeutralForeground3Pressed: string;
    colorNeutralForeground3Selected: string;
    colorNeutralForeground3BrandHover: string;
    colorNeutralForeground3BrandPressed: string;
    colorNeutralForeground3BrandSelected: string;
    colorNeutralForeground4: string;
    colorNeutralForegroundDisabled: string;
    colorBrandForegroundLink: string;
    colorBrandForegroundLinkHover: string;
    colorBrandForegroundLinkPressed: string;
    colorBrandForegroundLinkSelected: string;
    colorCompoundBrandForeground1: string;
    colorCompoundBrandForeground1Hover: string;
    colorCompoundBrandForeground1Pressed: string;
    colorBrandForeground1: string;
    colorBrandForeground2: string;
    colorNeutralForegroundInverted: string;
    colorNeutralForegroundOnBrand: string;
    colorNeutralForegroundInvertedLink: string;
    colorNeutralForegroundInvertedLinkHover: string;
    colorNeutralForegroundInvertedLinkPressed: string;
    colorNeutralForegroundInvertedLinkSelected: string;
    colorNeutralBackground1: string;
    colorNeutralBackground1Hover: string;
    colorNeutralBackground1Pressed: string;
    colorNeutralBackground1Selected: string;
    colorNeutralBackground2: string;
    colorNeutralBackground2Hover: string;
    colorNeutralBackground2Pressed: string;
    colorNeutralBackground2Selected: string;
    colorNeutralBackground3: string;
    colorNeutralBackground3Hover: string;
    colorNeutralBackground3Pressed: string;
    colorNeutralBackground3Selected: string;
    colorNeutralBackground4: string;
    colorNeutralBackground4Hover: string;
    colorNeutralBackground4Pressed: string;
    colorNeutralBackground4Selected: string;
    colorNeutralBackground5: string;
    colorNeutralBackground5Hover: string;
    colorNeutralBackground5Pressed: string;
    colorNeutralBackground5Selected: string;
    colorNeutralBackground6: string;
    colorNeutralBackgroundInverted: string;
    colorSubtleBackground: string;
    colorSubtleBackgroundHover: string;
    colorSubtleBackgroundPressed: string;
    colorSubtleBackgroundSelected: string;
    colorTransparentBackground: string;
    colorTransparentBackgroundHover: string;
    colorTransparentBackgroundPressed: string;
    colorTransparentBackgroundSelected: string;
    colorNeutralBackgroundDisabled: string;
    colorNeutralStencil1: string;
    colorNeutralStencil2: string;
    colorBrandBackground: string;
    colorBrandBackgroundHover: string;
    colorBrandBackgroundPressed: string;
    colorBrandBackgroundSelected: string;
    colorCompoundBrandBackground: string;
    colorCompoundBrandBackgroundHover: string;
    colorCompoundBrandBackgroundPressed: string;
    colorBrandBackgroundStatic: string;
    colorBrandBackground2: string;
    colorNeutralStrokeAccessible: string;
    colorNeutralStrokeAccessibleHover: string;
    colorNeutralStrokeAccessiblePressed: string;
    colorNeutralStrokeAccessibleSelected: string;
    colorNeutralStroke1: string;
    colorNeutralStroke1Hover: string;
    colorNeutralStroke1Pressed: string;
    colorNeutralStroke1Selected: string;
    colorNeutralStroke2: string;
    colorNeutralStroke3: string;
    colorBrandStroke1: string;
    colorBrandStroke2: string;
    colorCompoundBrandStroke: string;
    colorCompoundBrandStrokeHover: string;
    colorCompoundBrandStrokePressed: string;
    colorNeutralStrokeDisabled: string;
    colorTransparentStroke: string;
    colorTransparentStrokeInteractive: string;
    colorTransparentStrokeDisabled: string;
    colorStrokeFocus1: string;
    colorStrokeFocus2: string;
    colorNeutralShadowAmbient: string;
    colorNeutralShadowKey: string;
    colorNeutralShadowAmbientLighter: string;
    colorNeutralShadowKeyLighter: string;
    colorNeutralShadowAmbientDarker: string;
    colorNeutralShadowKeyDarker: string;
    colorBrandShadowAmbient: string;
    colorBrandShadowKey: string;
};

/**
 * Possible color variant values
 */
declare type ColorVariants = {
    shade50: string;
    shade40: string;
    shade30: string;
    shade20: string;
    shade10: string;
    primary: string;
    tint10: string;
    tint20: string;
    tint30: string;
    tint40: string;
    tint50: string;
    tint60: string;
};

export declare const createDarkTheme: (brand: BrandVariants) => Theme;

export declare const createHighContrastTheme: () => Theme;

export declare const createLightTheme: (brand: BrandVariants) => Theme;

export declare const createTeamsDarkTheme: (brand: BrandVariants) => Theme;

export declare type FontFamilyTokens = {
    fontFamilyBase: string;
    fontFamilyMonospace: string;
    fontFamilyNumeric: string;
};

export declare type FontSizeTokens = {
    fontSizeBase100: string;
    fontSizeBase200: string;
    fontSizeBase300: string;
    fontSizeBase400: string;
    fontSizeBase500: string;
    fontSizeBase600: string;
    fontSizeHero700: string;
    fontSizeHero800: string;
    fontSizeHero900: string;
    fontSizeHero1000: string;
};

export declare type FontWeightTokens = {
    fontWeightRegular: number;
    fontWeightMedium: number;
    fontWeightSemibold: number;
};

declare type GlobalSharedColorsT = 'DarkRed' | 'Burgundy' | 'Cranberry' | 'Red' | 'DarkOrange' | 'Bronze' | 'Pumpkin' | 'Orange' | 'Peach' | 'Marigold' | 'Yellow' | 'Gold' | 'Brass' | 'Brown' | 'DarkBrown' | 'Lime' | 'Forest' | 'Seafoam' | 'LightGreen' | 'Green' | 'DarkGreen' | 'LightTeal' | 'Teal' | 'DarkTeal' | 'Cyan' | 'Steel' | 'LightBlue' | 'Blue' | 'RoyalBlue' | 'DarkBlue' | 'Cornflower' | 'Navy' | 'Lavender' | 'Purple' | 'DarkPurple' | 'Orchid' | 'Grape' | 'Berry' | 'Lilac' | 'Pink' | 'HotPink' | 'Magenta' | 'Plum' | 'Beige' | 'Mink' | 'Silver' | 'Platinum' | 'Anchor' | 'Charcoal';

export declare type LineHeightTokens = {
    lineHeightBase100: string;
    lineHeightBase200: string;
    lineHeightBase300: string;
    lineHeightBase400: string;
    lineHeightBase500: string;
    lineHeightBase600: string;
    lineHeightHero700: string;
    lineHeightHero800: string;
    lineHeightHero900: string;
    lineHeightHero1000: string;
};

export declare function mergeThemes(a: Theme | undefined, b: PartialTheme | Theme | undefined): Theme;

export declare type PartialTheme = Partial<Theme>;

/**
 * Design tokens for shadow levels
 */
export declare type ShadowTokens = {
    shadow2: string;
    shadow4: string;
    shadow8: string;
    shadow16: string;
    shadow28: string;
    shadow64: string;
};

export declare type StrokeWidthTokens = {
    strokeWidthThin: string;
    strokeWidthThick: string;
    strokeWidthThicker: string;
    strokeWidthThickest: string;
};

export declare const teamsDarkTheme: Theme;

export declare const teamsHighContrastTheme: Theme;

export declare const teamsLightTheme: Theme;

export declare type Theme = FontSizeTokens & LineHeightTokens & BorderRadiusTokens & StrokeWidthTokens & ShadowTokens & FontFamilyTokens & FontWeightTokens & ColorPaletteTokens & ColorTokens;

export declare function themeToCSSVariables(theme: Theme): Record<string, string | number>;

export declare const webDarkTheme: Theme;

export declare const webHighContrastTheme: Theme;

export declare const webLightTheme: Theme;

export { }
