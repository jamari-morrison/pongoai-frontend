var getPositionMap = function (rtl) { return ({
    above: 'top',
    below: 'bottom',
    before: rtl ? 'right' : 'left',
    after: rtl ? 'left' : 'right',
}); };
var getAlignmentMap = function (rtl) { return ({
    start: rtl ? 'end' : 'start',
    end: rtl ? 'start' : 'end',
    top: 'start',
    bottom: 'end',
    center: '',
}); };
var shouldAlignToCenter = function (p, a) {
    var positionedVertically = p === 'above' || p === 'below';
    var alignedVertically = a === 'top' || a === 'bottom';
    return (positionedVertically && alignedVertically) || (!positionedVertically && !alignedVertically);
};
/**
 * @see positioninHelper.test.ts for expected placement values
 */
export var getPlacement = function (align, position, rtl) {
    var alignment = shouldAlignToCenter(position, align) ? 'center' : align;
    var computedPosition = position && getPositionMap(rtl)[position];
    var computedAlignmnent = alignment && getAlignmentMap(rtl)[alignment];
    if (computedPosition && computedAlignmnent) {
        return computedPosition + "-" + computedAlignmnent;
    }
    return computedPosition || 'auto';
};
export var applyRtlToOffset = function (offset) {
    if (typeof offset === 'undefined') {
        return undefined;
    }
    if (Array.isArray(offset)) {
        offset[0] = offset[0] * -1;
        return offset;
    }
    return (function (param) { return applyRtlToOffset(offset(param)); });
};
//# sourceMappingURL=positioningHelper.js.map