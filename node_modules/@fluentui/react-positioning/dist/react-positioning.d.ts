import * as PopperJs from '@popperjs/core';
import * as React_2 from 'react';

export declare type Alignment = 'top' | 'bottom' | 'start' | 'end' | 'center';

export declare type AutoSize = 'height' | 'height-always' | 'width' | 'width-always' | 'always' | boolean;

export declare type Boundary = PopperJs.Boundary | 'scrollParent' | 'window';

/**
 * Creates a virtual element based on the position of a click event
 * Can be used as a target for popper in scenarios such as context menus
 */
export declare function createVirtualElementFromClick(nativeEvent: MouseEvent): PopperVirtualElement;

/**
 * Generally when adding an arrow to popper, it's necessary to offset the position of the popper by the
 * height of the arrow. A simple utility to merge a provided offset with an arrow height to return the final offset
 *
 * @param userOffset - The offset provided by the user
 * @param arrowHeight - The height of the arrow in px
 * @returns User offset augmented with arrow height
 */
export declare function mergeArrowOffset(userOffset: Offset | undefined | null, arrowHeight: number): Offset;

export declare type Offset = OffsetFunction | [number | null | undefined, number | null | undefined];

export declare type OffsetFunction = (param: OffsetFunctionParam) => [number | null | undefined, number | null | undefined];

export declare type OffsetFunctionParam = {
    popper: PopperJs.Rect;
    reference: PopperJs.Rect;
    placement: PopperJs.Placement;
};

declare interface PopperOptions extends PositioningProps {
    /**
     * If false, delays Popper's creation.
     * @default true
     */
    enabled?: boolean;
    onStateUpdate?: (state: Partial<PopperJs.State>) => void;
    /**
     * Enables the Popper box to position itself in 'fixed' mode (default value is position: 'absolute')
     * @default false
     */
    positionFixed?: boolean;
    /**
     * When the reference element or the viewport is outside viewport allows a popper element to be fully in viewport.
     * "all" enables this behavior for all axis.
     */
    unstable_disableTether?: boolean | 'all';
}

export declare type PopperRefHandle = {
    updatePosition: () => void;
};

export declare type PopperVirtualElement = PopperJs.VirtualElement;

export declare type Position = 'above' | 'below' | 'before' | 'after';

export declare interface PositioningProps {
    /** Alignment for the component. Only has an effect if used with the @see position option */
    align?: Alignment;
    /** The element which will define the boundaries of the popper position for the flip behavior. */
    flipBoundary?: Boundary;
    /** The element which will define the boundaries of the popper position for the overflow behavior. */
    overflowBoundary?: Boundary;
    /** An imperative handle to Popper methods. */
    popperRef?: React_2.Ref<PopperRefHandle>;
    /**
     * Position for the component. Position has higher priority than align. If position is vertical ('above' | 'below')
     * and align is also vertical ('top' | 'bottom') or if both position and align are horizontal ('before' | 'after'
     * and 'start' | 'end' respectively),
     * then provided value for 'align' will be ignored and 'center' will be used instead.
     */
    position?: Position;
    /**
     * Lets you displace a popper element from its reference element.
     * This can be useful if you need to apply some margin between them or if you need to fine tune the
     * position according to some custom logic.
     */
    offset?: Offset;
    /**
     * Defines padding between the corner of the popup element and the arrow.
     * Use to prevent the arrow from overlapping a rounded corner, for example.
     */
    arrowPadding?: number;
    /**
     * Applies max-height and max-width on popper to fit it within the available space in viewport.
     * true enables this for both width and height when overflow happens.
     * 'always' applies `max-height`/`max-width` regardless of overflow.
     * 'height' applies `max-height` when overflow happens, and 'width' for `max-width`
     * `height-always` applies `max-height` regardless of overflow, and 'width-always' for always applying `max-width`
     */
    autoSize?: AutoSize;
    /**
     * Manual override for popper target. Useful for scenarios where a component accepts user prop to override target
     */
    target?: HTMLElement | PopperVirtualElement | null;
    /**
     * Modifies position and alignment to cover the target
     */
    coverTarget?: boolean;
    /**
     * Disables automatic repositioning of the component; it will always be placed according to the values of `align` and
     * `position` props, regardless of the size of the component, the reference element or the viewport.
     */
    pinned?: boolean;
}

export declare type PositioningShorthand = PositioningProps | PositioningShorthandValue;

export declare type PositioningShorthandValue = 'above' | 'above-start' | 'above-end' | 'below' | 'below-start' | 'below-end' | 'before' | 'before-top' | 'before-bottom' | 'after' | 'after-top' | 'after-bottom';

export declare function resolvePositioningShorthand(shorthand: PositioningShorthand | undefined | null): Readonly<PositioningProps>;

/**
 * Exposes Popper positioning API via React hook. Contains few important differences between an official "react-popper"
 * package:
 * - style attributes are applied directly on DOM to avoid re-renders
 * - refs changes and resolution is handled properly without re-renders
 * - contains a specific to React fix related to initial positioning when containers have components with managed focus
 *   to avoid focus jumps
 */
export declare function usePopper(options?: PopperOptions): {
    targetRef: React_2.MutableRefObject<any>;
    containerRef: React_2.MutableRefObject<any>;
    arrowRef: React_2.MutableRefObject<any>;
};

/**
 * A state hook that manages a popper virtual element from mouseevents.
 * Useful for scenarios where a component needs to be positioned by mouse click (e.g. contextmenu)
 * React synthetic events are not persisted by this hook
 *
 * @param initialState - initializes a user provided state similare to useState
 * @returns state and dispatcher for a Popper virtual element that uses native/synthetic mouse events
 */
export declare const usePopperMouseTarget: (initialState?: PopperJs.VirtualElement | (() => PopperJs.VirtualElement) | undefined) => readonly [PopperJs.VirtualElement | undefined, (event: React_2.MouseEvent | MouseEvent | undefined | null) => void];

export { }
