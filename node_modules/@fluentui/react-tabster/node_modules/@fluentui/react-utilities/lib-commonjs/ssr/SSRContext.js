"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIsSSR = exports.SSRProvider = exports.useSSRContext = exports.SSRContext = exports.defaultSSRContextValue = void 0;

var React = /*#__PURE__*/require("react");

var canUseDOM_1 = /*#__PURE__*/require("./canUseDOM");
/**
 * Default context value to use in case there is no SSRProvider. This is fine for client-only apps.
 *
 * @internal
 */


exports.defaultSSRContextValue = {
  current: 0
};
exports.SSRContext = /*#__PURE__*/React.createContext(exports.defaultSSRContextValue);
/**
 * @internal
 */

function useSSRContext() {
  return React.useContext(exports.SSRContext);
}

exports.useSSRContext = useSSRContext;
/**
 * When using SSR with Fluent UI, applications must be wrapped in an SSRProvider. This ensures that auto generated ids
 * are consistent between the client and server.
 *
 * @public
 */

var SSRProvider = function (props) {
  var value = React.useState(function () {
    return {
      current: 0
    };
  })[0];
  return React.createElement(exports.SSRContext.Provider, {
    value: value
  }, props.children);
};

exports.SSRProvider = SSRProvider;
/**
 * Returns whether the component is currently being server side rendered or hydrated on the client. Can be used to delay
 * browser-specific rendering until after hydration. May cause re-renders on a client when is used within SSRProvider.
 */

function useIsSSR() {
  var isInSSRContext = useSSRContext() !== exports.defaultSSRContextValue;

  var _a = React.useState(isInSSRContext),
      isSSR = _a[0],
      setIsSSR = _a[1]; // If we are rendering in a non-DOM environment, and there's no SSRProvider, provide a warning to hint to the
  // developer to add one.


  if (process.env.NODE_ENV !== 'production') {
    if (!isInSSRContext && !canUseDOM_1.canUseDOM()) {
      // eslint-disable-next-line no-console
      console.error('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are ' + 'generated between the client and server.');
    }
  } // If on the client, and the component was initially server rendered, then schedule a layout effect to update the
  // component after hydration.


  if (canUseDOM_1.canUseDOM() && isInSSRContext) {
    // This if statement technically breaks the rules of hooks, but is safe because the condition never changes after
    // mounting.
    // eslint-disable-next-line
    React.useLayoutEffect(function () {
      setIsSSR(false);
    }, []);
  }

  return isSSR;
}

exports.useIsSSR = useIsSSR;
//# sourceMappingURL=SSRContext.js.map