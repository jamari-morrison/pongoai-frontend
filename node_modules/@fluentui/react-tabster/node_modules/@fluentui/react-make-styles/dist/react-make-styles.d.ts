import { createDOMRenderer } from '@fluentui/make-styles';
import type { CSSClassesMapBySlot } from '@fluentui/make-styles';
import type { CSSRulesByBucket } from '@fluentui/make-styles';
import type { MakeStaticStyles } from '@fluentui/make-styles';
import type { MakeStylesRenderer } from '@fluentui/make-styles';
import type { MakeStylesStyleRule } from '@fluentui/make-styles';
import { mergeClasses } from '@fluentui/make-styles';
import * as React_2 from 'react';
import type { Theme } from '@fluentui/react-theme';

/**
 * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.
 *
 * @internal
 */
export declare function __styles<Slots extends string>(classesMapBySlot: CSSClassesMapBySlot<Slots>, cssRules: CSSRulesByBucket): () => Record<Slots, string>;

export { createDOMRenderer }

export declare function makeStaticStyles<Selectors>(styles: MakeStaticStyles | MakeStaticStyles[]): () => void;

export declare function makeStyles<Slots extends string | number>(stylesBySlots: Record<Slots, MakeStylesStyleRule<Theme>>): () => Record<Slots, string>;

export { mergeClasses }

/**
 * @private
 */
export declare const RendererContext: React_2.Context<MakeStylesRenderer>;

/**
 * @public
 */
export declare const RendererProvider: React_2.FC<RendererProviderProps>;

export declare interface RendererProviderProps {
    /** An instance of makeStyles() renderer. */
    renderer: MakeStylesRenderer;
    /**
     * Document used to insert CSS variables to head
     */
    targetDocument?: Document;
}

/**
 * This method returns a list of <style> React elements with the rendered CSS. This is useful for Server-Side rendering.
 *
 * @public
 */
export declare function renderToStyleElements(renderer: MakeStylesRenderer): React_2.ReactElement[];

/**
 * Returns an instance of current makeStyles() renderer.
 *
 * @private
 */
export declare function useRenderer(): MakeStylesRenderer;

export { }
