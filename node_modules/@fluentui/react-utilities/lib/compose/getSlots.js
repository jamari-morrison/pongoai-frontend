import { __rest } from "tslib";
import * as React from 'react';
import { nullRender } from './nullRender';
import { omit } from '../utils/omit';
/**
 * Given the state and an array of slot names, will break out `slots` and `slotProps`
 * collections.
 *
 * The root is derived from a mix of `components` props and `as` prop.
 *
 * Slots will render as null if they are rendered as primitives with undefined children.
 *
 * The slotProps will always omit the `as` prop within them, and for slots that are string
 * primitives, the props will be filtered according the the slot type. For example, if the
 * slot is rendered `as: 'a'`, the props will be filtered for acceptable anchor props.
 *
 * @param state - State including slot definitions
 * @param slotNames - Name of which props are slots
 * @returns An object containing the `slots` map and `slotProps` map.
 */

export function getSlots(state, slotNames) {
  if (slotNames === void 0) {
    slotNames = ['root'];
  }

  var slots = {};
  var slotProps = {};

  for (var _i = 0, slotNames_1 = slotNames; _i < slotNames_1.length; _i++) {
    var slotName = slotNames_1[_i];

    var _a = getSlot(state, slotName),
        slot = _a[0],
        props = _a[1];

    slots[slotName] = slot;
    slotProps[slotName] = props;
  }

  return {
    slots: slots,
    slotProps: slotProps
  };
}

function getSlot(state, slotName) {
  var _a, _b, _c;

  if (state[slotName] === undefined) {
    return [nullRender, undefined];
  }

  var _d = state[slotName],
      children = _d.children,
      asProp = _d.as,
      rest = __rest(_d, ["children", "as"]);

  var slot = ((_a = state.components) === null || _a === void 0 ? void 0 : _a[slotName]) === undefined || typeof state.components[slotName] === 'string' ? asProp || ((_b = state.components) === null || _b === void 0 ? void 0 : _b[slotName]) || 'div' : state.components[slotName];

  if (typeof children === 'function') {
    var render = children;
    return [React.Fragment, {
      children: render(slot, rest)
    }];
  }

  var shouldOmitAsProp = typeof slot === 'string' && ((_c = state[slotName]) === null || _c === void 0 ? void 0 : _c.as);
  var slotProps = shouldOmitAsProp ? omit(state[slotName], ['as']) : state[slotName];
  return [slot, slotProps];
}
//# sourceMappingURL=getSlots.js.map