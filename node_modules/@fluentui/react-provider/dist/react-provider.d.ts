import type { ComponentProps } from '@fluentui/react-utilities';
import type { ComponentState } from '@fluentui/react-utilities';
import type { IntrinsicShorthandProps } from '@fluentui/react-utilities';
import type { PartialTheme } from '@fluentui/react-theme';
import type { ProviderContextValue } from '@fluentui/react-shared-contexts';
import * as React_2 from 'react';
import type { Theme } from '@fluentui/react-theme';
import type { ThemeClassNameContextValue } from '@fluentui/react-shared-contexts';
import type { ThemeContextValue } from '@fluentui/react-shared-contexts';
import type { TooltipContextType } from '@fluentui/react-shared-contexts';
import { useFluent } from '@fluentui/react-shared-contexts';
import { useTheme } from '@fluentui/react-shared-contexts';

export declare const FluentProvider: React_2.ForwardRefExoticComponent<FluentProviderProps & React_2.RefAttributes<HTMLElement>>;

export declare interface FluentProviderCommons {
    /** Sets the direction of text & generated styles. */
    dir: 'ltr' | 'rtl';
    /** Provides the document, can be undefined during SSR render. */
    targetDocument: Document | undefined;
}

export declare interface FluentProviderContextValues {
    provider: ProviderContextValue;
    theme: ThemeContextValue;
    themeClassName: ThemeClassNameContextValue;
    tooltip: TooltipContextType;
}

export declare interface FluentProviderProps extends Omit<ComponentProps<FluentProviderSlots>, 'dir'>, Partial<FluentProviderCommons> {
    theme?: PartialTheme;
}

export declare const fluentProviderShorthandProps: (keyof FluentProviderSlots)[];

export declare type FluentProviderSlots = {
    root: IntrinsicShorthandProps<'div'>;
};

export declare interface FluentProviderState extends ComponentState<FluentProviderSlots>, FluentProviderCommons {
    theme: Theme;
    themeClassName: string;
}

/**
 * Render the final JSX of FluentProvider
 */
export declare const renderFluentProvider: (state: FluentProviderState, contextValues: FluentProviderContextValues) => JSX.Element;

export { useFluent }

/**
 * Create the state required to render FluentProvider.
 *
 * The returned state can be modified with hooks such as useFluentProviderStyles,
 * before being passed to renderFluentProvider.
 *
 * @param props - props from this instance of FluentProvider
 * @param ref - reference to root HTMLElement of FluentProvider
 */
export declare const useFluentProvider: (props: FluentProviderProps, ref: React_2.Ref<HTMLElement>) => FluentProviderState;

export declare function useFluentProviderContextValues(state: FluentProviderState): FluentProviderContextValues;

export { useTheme }

export { }
