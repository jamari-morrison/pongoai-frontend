import { __assign } from "tslib";
import { useKeyboardNavAttribute } from '@fluentui/react-tabster';
import { mergeThemes } from '@fluentui/react-theme';
import { useFluent, useTheme } from '@fluentui/react-shared-contexts';
import { getNativeElementProps, useMergedRefs } from '@fluentui/react-utilities';
import { useThemeStyleTag } from './useThemeStyleTag';
export var fluentProviderShorthandProps = ['root'];
/**
 * Create the state required to render FluentProvider.
 *
 * The returned state can be modified with hooks such as useFluentProviderStyles,
 * before being passed to renderFluentProvider.
 *
 * @param props - props from this instance of FluentProvider
 * @param ref - reference to root HTMLElement of FluentProvider
 */

export var useFluentProvider = function (props, ref) {
  var parentContext = useFluent();
  var parentTheme = useTheme();
  /**
   * TODO: add merge functions to "dir" merge,
   * nesting providers with the same "dir" should not add additional attributes to DOM
   * see https://github.com/microsoft/fluentui/blob/0dc74a19f3aa5a058224c20505016fbdb84db172/packages/fluentui/react-northstar/src/utils/mergeProviderContexts.ts#L89-L93
   */

  var _a = props.dir,
      dir = _a === void 0 ? parentContext.dir : _a,
      _b = props.targetDocument,
      targetDocument = _b === void 0 ? parentContext.targetDocument : _b,
      _c = props.theme,
      theme = _c === void 0 ? {} : _c;
  var mergedTheme = mergeThemes(parentTheme, theme);
  return {
    dir: dir,
    targetDocument: targetDocument,
    theme: mergedTheme,
    themeClassName: useThemeStyleTag({
      theme: mergedTheme,
      targetDocument: targetDocument
    }),
    components: {
      root: 'div'
    },
    root: getNativeElementProps('div', __assign(__assign({}, props), {
      dir: dir,
      ref: useMergedRefs(ref, useKeyboardNavAttribute())
    }))
  };
};
//# sourceMappingURL=useFluentProvider.js.map