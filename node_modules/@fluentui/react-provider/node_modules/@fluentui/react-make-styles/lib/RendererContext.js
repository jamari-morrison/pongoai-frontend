import { createDOMRenderer, rehydrateRendererCache } from '@fluentui/make-styles';
import { canUseDOM } from '@fluentui/react-utilities';
import * as React from 'react';
/**
 * @private
 */

export var RendererContext = /*#__PURE__*/React.createContext( /*#__PURE__*/createDOMRenderer());
/**
 * @public
 */

export var RendererProvider = function (_a) {
  var children = _a.children,
      renderer = _a.renderer,
      targetDocument = _a.targetDocument;

  if (canUseDOM()) {
    // This if statement technically breaks the rules of hooks, but is safe because the condition never changes after
    // mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useMemo(function () {
      // "rehydrateCache()" can't be called in effects as it needs to be called before any component will be rendered to
      // avoid double insertion of classes
      rehydrateRendererCache(renderer, targetDocument);
    }, [renderer, targetDocument]);
  }

  return /*#__PURE__*/React.createElement(RendererContext.Provider, {
    value: renderer
  }, children);
};
/**
 * Returns an instance of current makeStyles() renderer.
 *
 * @private
 */

export function useRenderer() {
  return React.useContext(RendererContext);
}
//# sourceMappingURL=RendererContext.js.map