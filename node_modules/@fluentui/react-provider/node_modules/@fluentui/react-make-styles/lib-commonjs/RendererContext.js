"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRenderer = exports.RendererProvider = exports.RendererContext = void 0;

var make_styles_1 = /*#__PURE__*/require("@fluentui/make-styles");

var react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");

var React = /*#__PURE__*/require("react");
/**
 * @private
 */


exports.RendererContext = /*#__PURE__*/React.createContext( /*#__PURE__*/make_styles_1.createDOMRenderer());
/**
 * @public
 */

var RendererProvider = function (_a) {
  var children = _a.children,
      renderer = _a.renderer,
      targetDocument = _a.targetDocument;

  if (react_utilities_1.canUseDOM()) {
    // This if statement technically breaks the rules of hooks, but is safe because the condition never changes after
    // mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    React.useMemo(function () {
      // "rehydrateCache()" can't be called in effects as it needs to be called before any component will be rendered to
      // avoid double insertion of classes
      make_styles_1.rehydrateRendererCache(renderer, targetDocument);
    }, [renderer, targetDocument]);
  }

  return React.createElement(exports.RendererContext.Provider, {
    value: renderer
  }, children);
};

exports.RendererProvider = RendererProvider;
/**
 * Returns an instance of current makeStyles() renderer.
 *
 * @private
 */

function useRenderer() {
  return React.useContext(exports.RendererContext);
}

exports.useRenderer = useRenderer;
//# sourceMappingURL=RendererContext.js.map