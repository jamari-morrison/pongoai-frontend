import * as React from 'react';
import { useEventCallback } from './useEventCallback';
/**
 * Utility to perform checks where a click/touch event was made outside a component
 */

export var useOnScrollOutside = function (options) {
  var refs = options.refs,
      callback = options.callback,
      element = options.element,
      disabled = options.disabled,
      containsProp = options.contains;
  var listener = useEventCallback(function (ev) {
    var contains = containsProp || function (parent, child) {
      return !!(parent === null || parent === void 0 ? void 0 : parent.contains(child));
    };

    var isOutside = refs.every(function (ref) {
      return !contains(ref.current || null, ev.target);
    });

    if (isOutside && !disabled) {
      callback(ev);
    }
  });
  React.useEffect(function () {
    if (!disabled) {
      element === null || element === void 0 ? void 0 : element.addEventListener('wheel', listener);
      element === null || element === void 0 ? void 0 : element.addEventListener('touchmove', listener);
    }

    return function () {
      element === null || element === void 0 ? void 0 : element.removeEventListener('wheel', listener);
      element === null || element === void 0 ? void 0 : element.removeEventListener('touchmove', listener);
    };
  }, [listener, element, disabled]);
};
//# sourceMappingURL=useOnScrollOutside.js.map