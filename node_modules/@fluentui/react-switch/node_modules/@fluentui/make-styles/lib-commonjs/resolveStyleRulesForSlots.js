"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveStyleRulesForSlots = void 0;

var createCSSVariablesProxy_1 = /*#__PURE__*/require("./runtime/createCSSVariablesProxy");

var resolveStyleRules_1 = /*#__PURE__*/require("./runtime/resolveStyleRules");
/**
 * Calls resolveStyleRules() for each slot, is also used by build time transform.
 *
 * @param stylesBySlots - An object with makeStyles rules where a key is a slot name
 * @param unstable_cssPriority - Defines priority for selectors of generated CSS rules
 *
 * @return - A tuple with an object classnames mapping where a key is a slot name and an array with CSS rules
 */


function resolveStyleRulesForSlots(stylesBySlots, unstable_cssPriority) {
  var tokensProxy = createCSSVariablesProxy_1.createCSSVariablesProxy();
  var classesMapBySlot = {};
  var cssRules = {};

  var _loop_1 = function (slotName) {
    var slotStyles = typeof stylesBySlots[slotName] === 'function' ? stylesBySlots[slotName](tokensProxy) : stylesBySlots[slotName];

    var _a = resolveStyleRules_1.resolveStyleRules(slotStyles, unstable_cssPriority),
        cssClassMap = _a[0],
        cssRulesByBucket = _a[1];

    classesMapBySlot[slotName] = cssClassMap;
    Object.keys(cssRulesByBucket).forEach(function (styleBucketName) {
      cssRules[styleBucketName] = (cssRules[styleBucketName] || []).concat(cssRulesByBucket[styleBucketName]);
    });
  }; // eslint-disable-next-line guard-for-in


  for (var slotName in stylesBySlots) {
    _loop_1(slotName);
  }

  return [classesMapBySlot, cssRules];
}

exports.resolveStyleRulesForSlots = resolveStyleRulesForSlots;
//# sourceMappingURL=resolveStyleRulesForSlots.js.map