"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeClasses = void 0;

var constants_1 = /*#__PURE__*/require("./constants");

var hashSequence_1 = /*#__PURE__*/require("./runtime/utils/hashSequence");

var reduceToClassNameForSlots_1 = /*#__PURE__*/require("./runtime/reduceToClassNameForSlots"); // Contains a mapping of previously resolved sequences of atomic classnames


var mergeClassesCachedResults = {};
var SEQUENCE_SIZE = constants_1.SEQUENCE_PREFIX.length + constants_1.SEQUENCE_HASH_LENGTH;

function mergeClasses() {
  // arguments are parsed manually to avoid double loops as TS & Babel transforms rest via an additional loop
  // @see https://babeljs.io/docs/en/babel-plugin-transform-parameters
  var dir = null;
  var resultClassName = ''; // Is used as a cache key to avoid object merging

  var sequenceMatch = '';
  var sequenceMappings = [];

  for (var i = 0; i < arguments.length; i++) {
    // eslint-disable-next-line prefer-rest-params
    var className = arguments[i];

    if (typeof className === 'string') {
      // All classes generated by `makeStyles()` are prefixed by a sequence hash, this allows to identify class sets
      // without parsing each className in a string
      var sequenceIndex = className.indexOf(constants_1.SEQUENCE_PREFIX);

      if (sequenceIndex === -1) {
        resultClassName += className + ' ';
      } else {
        var sequenceId = className.slice(sequenceIndex, sequenceIndex + SEQUENCE_SIZE);
        var sequenceMapping = constants_1.DEFINITION_LOOKUP_TABLE[sequenceId]; // Handles a case with mixed classnames, i.e. "ui-button ATOMIC_CLASSES"

        if (sequenceIndex > 0) {
          resultClassName += className.slice(0, sequenceIndex);
        }

        if (sequenceMapping) {
          sequenceMatch += sequenceId;
          sequenceMappings.push(sequenceMapping[constants_1.LOOKUP_DEFINITIONS_INDEX]);

          if (process.env.NODE_ENV !== 'production') {
            if (dir !== null && dir !== sequenceMapping[constants_1.LOOKUP_DIR_INDEX]) {
              // eslint-disable-next-line no-console
              console.error("mergeClasses(): a passed string contains an identifier (" + sequenceId + ") that has different direction " + ("(dir=\"" + (sequenceMapping[1] ? 'rtl' : 'ltr') + "\") setting than other classes. This is not supported. ") + ("Source string: " + className));
            }
          }

          dir = sequenceMapping[constants_1.LOOKUP_DIR_INDEX];
        } else {
          if (process.env.NODE_ENV !== 'production') {
            // eslint-disable-next-line no-console
            console.error("mergeClasses(): a passed string contains an identifier (" + sequenceId + ") that does not match any entry " + ("in cache. Source string: " + className));
          }
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        if (className.indexOf(constants_1.SEQUENCE_PREFIX, sequenceIndex + 1) !== -1) {
          // eslint-disable-next-line no-console
          console.error('mergeClasses(): a passed string contains multiple identifiers of atomic classes (classes that start ' + ("with \"" + constants_1.SEQUENCE_PREFIX + "\"), it's possible that passed classes were concatenated in a wrong way. ") + ("Source string: " + className));
        }
      }
    }
  } // .slice() there allows to avoid trailing space for non-atomic classes
  // "ui-button ui-flex " => "ui-button ui-flex"


  if (sequenceMatch === '') {
    return resultClassName.slice(0, -1);
  } // It's safe to reuse results to avoid continuous merging as results are stable
  // "__seq1 ... __seq2 ..." => "__seq12 ..."


  var mergeClassesResult = mergeClassesCachedResults[sequenceMatch];

  if (mergeClassesResult !== undefined) {
    return resultClassName + mergeClassesResult;
  } // eslint-disable-next-line prefer-spread


  var resultDefinitions = Object.assign.apply(Object, // .assign() mutates the first object, we can't mutate mappings as it will produce invalid results later
  [{}].concat(sequenceMappings));
  var atomicClassNames = reduceToClassNameForSlots_1.reduceToClassName(resultDefinitions, dir); // Each merge of classes generates a new sequence of atomic classes that needs to be registered

  var newSequenceHash = hashSequence_1.hashSequence(atomicClassNames, dir);
  atomicClassNames = newSequenceHash + ' ' + atomicClassNames;
  mergeClassesCachedResults[sequenceMatch] = atomicClassNames;
  constants_1.DEFINITION_LOOKUP_TABLE[newSequenceHash] = [resultDefinitions, dir];
  return resultClassName + atomicClassNames;
}

exports.mergeClasses = mergeClasses;
//# sourceMappingURL=mergeClasses.js.map