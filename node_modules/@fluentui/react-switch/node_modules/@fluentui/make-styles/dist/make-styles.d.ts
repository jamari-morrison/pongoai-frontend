import { Properties } from 'csstype';

/**
 * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.
 *
 * @internal
 */
export declare function __styles<Slots extends string>(classesMapBySlot: CSSClassesMapBySlot<Slots>, cssRules: CSSRulesByBucket): (options: Pick<MakeStylesOptions, 'dir' | 'renderer'>) => Record<Slots, string>;

/**
 * @internal
 */
export declare function createCSSVariablesProxy(prefix?: string): unknown;

/**
 * Creates a new instances of a renderer.
 *
 * @public
 */
export declare function createDOMRenderer(target?: Document | undefined): MakeStylesRenderer;

export declare type CSSClasses = /* ltrClassName */ string | [/* ltrClassName */ string, /* rtlClassName */ string];

export declare type CSSClassesMap = Record<PropertyHash, CSSClasses>;

export declare type CSSClassesMapBySlot<Slots extends string | number> = Record<Slots, CSSClassesMap>;

export declare type CSSRulesByBucket = Partial<Record<StyleBucketName, string[]>>;

/** @internal */
export declare const DEFINITION_LOOKUP_TABLE: Record<SequenceHash, LookupItem>;

/** @internal */
export declare const HASH_PREFIX = "f";

/** @internal */
export declare const LOOKUP_DEFINITIONS_INDEX = 0;

/** @internal */
export declare const LOOKUP_DIR_INDEX = 1;

export declare type LookupItem = [/* definitions */ CSSClassesMap, /* dir */ /* dir */ 'rtl' | 'ltr'];

export declare type MakeStaticStyles = ({
    [key: string]: Properties & Record<string, any>;
} & {
    '@font-face'?: {
        fontFamily: string;
        src: string;
        fontFeatureSettings?: string;
        fontStretch?: string;
        fontStyle?: string;
        fontVariant?: string;
        fontVariationSettings?: string;
        fontWeight?: number | string;
        unicodeRange?: string;
    };
}) | string;

/**
 * Register static css.
 * @param styles - styles object or string.
 */
export declare function makeStaticStyles(styles: MakeStaticStyles | MakeStaticStyles[]): (options: MakeStaticStylesOptions) => void;

export declare interface MakeStaticStylesOptions {
    renderer: MakeStylesRenderer;
}

export declare interface MakeStyles extends Omit<Properties, 'animationName'> {
    [key: string]: any;
    animationName?: object | string;
}

export declare function makeStyles<Slots extends string | number, Tokens>(stylesBySlots: StylesBySlots<Slots, Tokens>, unstable_cssPriority?: number): (options: MakeStylesOptions) => Record<Slots, string>;

export declare interface MakeStylesOptions {
    dir: 'ltr' | 'rtl';
    renderer: MakeStylesRenderer;
}

export declare interface MakeStylesRenderer {
    id: string;
    /**
     * @private
     */
    insertionCache: Record<string, StyleBucketName>;
    /**
     * @private
     */
    styleElements: Partial<Record<StyleBucketName, HTMLStyleElement>>;
    /**
     * @private
     */
    insertCSSRules(cssRules: CSSRulesByBucket): void;
}

export declare type MakeStylesStyleFunctionRule<Tokens> = (tokens: Tokens) => MakeStyles;

export declare type MakeStylesStyleRule<Tokens> = MakeStyles | MakeStylesStyleFunctionRule<Tokens>;

/**
 * Function can take any number of arguments, joins classes together and deduplicates atomic declarations generated by
 * `makeStyles()`. Handles scoped directional styles.
 *
 * Classnames can be of any length, this function can take both atomic declarations and class names.
 *
 * Input:
 * ```
 * // not real classes
 * mergeClasses('ui-button', 'displayflex', 'displaygrid')
 * ```
 *
 * Output:
 * ```
 * 'ui-button displaygrid'
 * ```
 */
export declare function mergeClasses(...classNames: (string | false | undefined)[]): string;

export declare type PropertyHash = string;

/**
 * Should be called in a case of Server-Side rendering. Rehydrates cache from for a renderer to avoid double insertion
 * of classes to DOM.
 *
 * @public
 */
export declare function rehydrateRendererCache(renderer: MakeStylesRenderer, target?: Document | undefined): void;

/**
 * @internal
 */
export declare function resolveProxyValues<T>(value: T): T;

/**
 * Transforms input styles to classes maps & CSS rules.
 *
 * @internal
 */
export declare function resolveStyleRules(styles: MakeStyles, unstable_cssPriority?: number): [CSSClassesMap, CSSRulesByBucket];

/**
 * Calls resolveStyleRules() for each slot, is also used by build time transform.
 *
 * @param stylesBySlots - An object with makeStyles rules where a key is a slot name
 * @param unstable_cssPriority - Defines priority for selectors of generated CSS rules
 *
 * @return - A tuple with an object classnames mapping where a key is a slot name and an array with CSS rules
 */
export declare function resolveStyleRulesForSlots<Slots extends string | number, Tokens>(stylesBySlots: StylesBySlots<Slots, Tokens>, unstable_cssPriority: number): [CSSClassesMapBySlot<Slots>, CSSRulesByBucket];

/** @internal */
export declare const SEQUENCE_HASH_LENGTH = 7;

/** @internal */
export declare const SEQUENCE_PREFIX = "___";

export declare type SequenceHash = string;

/**
 * Buckets under which we will group our stylesheets.
 */
export declare type StyleBucketName = 'd' | 'l' | 'v' | 'w' | 'f' | 'i' | 'h' | 'a' | 'k' | 't';

/**
 * Ordered style buckets using their short pseudo name.
 *
 * @private
 */
export declare const styleBucketOrdering: StyleBucketName[];

export declare type StylesBySlots<Slots extends string | number, Tokens> = Record<Slots, MakeStylesStyleRule<Tokens>>;

export { }
