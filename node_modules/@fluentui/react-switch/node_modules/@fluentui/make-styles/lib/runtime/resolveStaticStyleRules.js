import { compileStaticCSS } from './compileStaticCSS';
import { compileCSSRules } from './compileCSS';
export function resolveStaticStyleRules(styles, result) {
  if (result === void 0) {
    result = {};
  }

  if (typeof styles === 'string') {
    var cssRules = compileCSSRules(styles);

    for (var _i = 0, cssRules_1 = cssRules; _i < cssRules_1.length; _i++) {
      var rule = cssRules_1[_i];
      addResolvedStyles(rule, result);
    }
  } else {
    // eslint-disable-next-line guard-for-in
    for (var property in styles) {
      var value = styles[property];
      var staticCSS = compileStaticCSS(property, value);
      addResolvedStyles(staticCSS, result);
    }
  }

  return result;
}

function addResolvedStyles(cssRule, result) {
  if (result === void 0) {
    result = {};
  } // ðŸ‘‡ static rules should be inserted into default bucket


  result.d = result.d || [];
  result.d.push(cssRule);
}
//# sourceMappingURL=resolveStaticStyleRules.js.map