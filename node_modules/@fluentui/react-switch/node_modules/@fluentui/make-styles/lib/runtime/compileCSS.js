import { compile, middleware, prefixer, rulesheet, serialize, stringify } from 'stylis';
import { hyphenateProperty } from './utils/hyphenateProperty';
import { normalizeNestedProperty } from './utils/normalizeNestedProperty';

function repeatSelector(selector, times) {
  return new Array(times + 2).join(selector);
}

export function compileCSSRules(cssRules) {
  var rules = [];
  serialize(compile(cssRules), middleware([prefixer, stringify, // ðŸ’¡ we are using `.insertRule()` API for DOM operations, which does not support
  // insertion of multiple CSS rules in a single call. `rulesheet` plugin extracts
  // individual rules to be used with this API
  rulesheet(function (rule) {
    return rules.push(rule);
  })]));
  return rules;
}
export function compileCSS(options) {
  var className = options.className,
      media = options.media,
      pseudo = options.pseudo,
      support = options.support,
      property = options.property,
      rtlClassName = options.rtlClassName,
      rtlProperty = options.rtlProperty,
      rtlValue = options.rtlValue,
      value = options.value,
      unstable_cssPriority = options.unstable_cssPriority;
  var classNameSelector = repeatSelector("." + className, unstable_cssPriority);
  var cssDeclaration = "{ " + hyphenateProperty(property) + ": " + value + "; }";
  var rtlClassNameSelector = null;
  var rtlCSSDeclaration = null;

  if (rtlProperty && rtlClassName) {
    rtlClassNameSelector = repeatSelector("." + rtlClassName, unstable_cssPriority);
    rtlCSSDeclaration = "{ " + hyphenateProperty(rtlProperty) + ": " + rtlValue + "; }";
  }

  var cssRule = ''; // Should be handled by namespace plugin of Stylis, is buggy now
  // Issues are reported:
  // https://github.com/thysultan/stylis.js/issues/253
  // https://github.com/thysultan/stylis.js/issues/252

  if (pseudo.indexOf(':global(') === 0) {
    // ðŸ‘‡ :global(GROUP_1)GROUP_2
    var GLOBAL_PSEUDO_REGEX = /global\((.+)\)(.+)?/;

    var _a = GLOBAL_PSEUDO_REGEX.exec(pseudo),
        globalSelector = _a[1],
        _b = _a[2],
        restPseudo = _b === void 0 ? '' : _b; // should be normalized to handle ":global(SELECTOR) &"


    var normalizedPseudo = normalizeNestedProperty(restPseudo.trim());
    var ltrRule = "" + classNameSelector + normalizedPseudo + " " + cssDeclaration;
    var rtlRule = rtlProperty ? "" + rtlClassNameSelector + normalizedPseudo + " " + rtlCSSDeclaration : '';
    cssRule = globalSelector + " { " + ltrRule + "; " + rtlRule + " }";
  } else {
    cssRule = "" + classNameSelector + pseudo + " " + cssDeclaration + ";";

    if (rtlProperty) {
      cssRule = cssRule + "; " + rtlClassNameSelector + pseudo + " " + rtlCSSDeclaration + ";";
    }
  }

  if (media) {
    cssRule = "@media " + media + " { " + cssRule + " }";
  }

  if (support) {
    cssRule = "@supports " + support + " { " + cssRule + " }";
  }

  return compileCSSRules(cssRule);
}
//# sourceMappingURL=compileCSS.js.map