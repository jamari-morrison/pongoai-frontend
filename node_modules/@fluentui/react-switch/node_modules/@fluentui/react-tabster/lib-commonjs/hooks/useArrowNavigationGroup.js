"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useArrowNavigationGroup = void 0;

var tabster_1 = /*#__PURE__*/require("tabster");

var useTabsterAttributes_1 = /*#__PURE__*/require("./useTabsterAttributes");

var useTabster_1 = /*#__PURE__*/require("./useTabster");
/**
 * A hook that returns the necessary tabster attributes to support arrow key navigation
 * @param options - Options to configure keyboard navigation
 */


var useArrowNavigationGroup = function (options) {
  var _a;

  var tabster = useTabster_1.useTabster();

  if (tabster) {
    tabster_1.getMover(tabster);
  }

  return useTabsterAttributes_1.useTabsterAttributes({
    mover: {
      cyclic: !!(options === null || options === void 0 ? void 0 : options.circular),
      direction: axisToMoverDirection((_a = options === null || options === void 0 ? void 0 : options.axis) !== null && _a !== void 0 ? _a : 'vertical'),
      memorizeCurrent: options === null || options === void 0 ? void 0 : options.memorizeCurrent
    }
  });
};

exports.useArrowNavigationGroup = useArrowNavigationGroup;

function axisToMoverDirection(axis) {
  switch (axis) {
    case 'horizontal':
      return tabster_1.Types.MoverDirections.Horizontal;

    case 'vertical':
    default:
      return tabster_1.Types.MoverDirections.Vertical;
  }
}
//# sourceMappingURL=useArrowNavigationGroup.js.map