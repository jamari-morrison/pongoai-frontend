import { Types, getMover } from 'tabster';
import { useTabsterAttributes } from './useTabsterAttributes';
import { useTabster } from './useTabster';
/**
 * A hook that returns the necessary tabster attributes to support arrow key navigation
 * @param options - Options to configure keyboard navigation
 */

export var useArrowNavigationGroup = function (options) {
  var _a;

  var tabster = useTabster();

  if (tabster) {
    getMover(tabster);
  }

  return useTabsterAttributes({
    mover: {
      cyclic: !!(options === null || options === void 0 ? void 0 : options.circular),
      direction: axisToMoverDirection((_a = options === null || options === void 0 ? void 0 : options.axis) !== null && _a !== void 0 ? _a : 'vertical'),
      memorizeCurrent: options === null || options === void 0 ? void 0 : options.memorizeCurrent
    }
  });
};

function axisToMoverDirection(axis) {
  switch (axis) {
    case 'horizontal':
      return Types.MoverDirections.Horizontal;

    case 'vertical':
    default:
      return Types.MoverDirections.Vertical;
  }
}
//# sourceMappingURL=useArrowNavigationGroup.js.map