import { __assign } from "tslib";
import { KEYBOARD_NAV_SELECTOR } from '../symbols';
/**
 * NOTE: the element with the focus outline needs to have `position: relative` so that the
 * pseudo element can be properly positioned.
 *
 * @param options - Configures the style of the focus outline
 * @returns focus outline styles object
 */

var getFocusOutlineStyles = function (options) {
  var _a, _b, _c, _d;

  var outlineRadius = options.outlineRadius,
      outlineColor = options.outlineColor,
      outlineOffset = options.outlineOffset,
      outlineWidth = options.outlineWidth;
  var outlineOffsetTop = ((_a = outlineOffset) === null || _a === void 0 ? void 0 : _a.top) || outlineOffset;
  var outlineOffsetBottom = ((_b = outlineOffset) === null || _b === void 0 ? void 0 : _b.bottom) || outlineOffset;
  var outlineOffsetLeft = ((_c = outlineOffset) === null || _c === void 0 ? void 0 : _c.left) || outlineOffset;
  var outlineOffsetRight = ((_d = outlineOffset) === null || _d === void 0 ? void 0 : _d.right) || outlineOffset;
  return {
    borderColor: 'transparent',
    ':after': {
      content: '""',
      position: 'absolute',
      pointerEvents: 'none',
      boxSizing: 'outline-box',
      zIndex: 1,
      borderStyle: 'solid',
      borderWidth: outlineWidth,
      borderRadius: outlineRadius,
      borderColor: outlineColor,
      top: !outlineOffset ? "-" + outlineWidth : "calc(0px - " + outlineWidth + " - " + outlineOffsetTop + ")",
      bottom: !outlineOffset ? "-" + outlineWidth : "calc(0px - " + outlineWidth + " - " + outlineOffsetBottom + ")",
      left: !outlineOffset ? "-" + outlineWidth : "calc(0px - " + outlineWidth + " - " + outlineOffsetLeft + ")",
      right: !outlineOffset ? "-" + outlineWidth : "calc(0px - " + outlineWidth + " - " + outlineOffsetRight + ")"
    }
  };
};

var defaultOptions = {
  selector: 'focus'
};
/**
 * NOTE: The element with the focus outline needs to have `position: relative` so that the
 * pseudo element can be properly positioned.
 *
 * @param theme - Theme used in @see makeStyles
 * @param options - Configure the style of the focus outline
 * @returns focus outline styles object for @see makeStyles
 */

export var createFocusOutlineStyle = function (theme, options) {
  var _a;

  if (options === void 0) {
    options = __assign({
      style: {}
    }, defaultOptions);
  }

  return _a = {
    ':focus-visible': {
      outline: 'none'
    }
  }, _a[KEYBOARD_NAV_SELECTOR + " :" + (options.selector || defaultOptions.selector)] = getFocusOutlineStyles(__assign({
    outlineColor: theme.colorStrokeFocus2,
    outlineRadius: theme.borderRadiusMedium,
    // FIXME: theme.global.strokeWidth.thick causes some weird bugs
    outlineWidth: '2px'
  }, options.style)), _a;
};
/**
 * Creates a style rule for @see makeStyles that includes the necessary selectors for focus.
 * Should be used only when @see createFocusOutlineStyle does not fit requirements
 *
 * @param rule - styling applied on focus, defaults to @see getDefaultFocusOutlineStyes
 */

export var createCustomFocusIndicatorStyle = function (rule, options) {
  if (options === void 0) {
    options = defaultOptions;
  }

  return function (theme) {
    var _a;

    return _a = {
      ':focus-visible': {
        outline: 'none'
      }
    }, _a[KEYBOARD_NAV_SELECTOR + " :" + (options.selector || defaultOptions.selector)] = typeof rule === 'function' ? rule(theme) : rule, _a;
  };
};
//# sourceMappingURL=useFocusIndicatorStyle.js.map