import * as React from 'react';
import { useTabster } from './useTabster';
/**
 * Returns a set of helper functions that will traverse focusable elements in the context of a root DOM element
 */

export var useFocusFinders = function () {
  var tabster = useTabster(); // Narrow props for now and let need dictate additional props in the future

  var findAllFocusable = React.useCallback(function (container, acceptCondition) {
    return (tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findAll({
      container: container,
      acceptCondition: acceptCondition
    })) || [];
  }, [tabster]);
  var findFirstFocusable = React.useCallback(function (container) {
    return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findFirst({
      container: container
    });
  }, [tabster]);
  var findLastFocusable = React.useCallback(function (container) {
    return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findLast({
      container: container
    });
  }, [tabster]);
  var findNextFocusable = React.useCallback(function (currentElement) {
    return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findNext({
      currentElement: currentElement
    });
  }, [tabster]);
  var findPrevFocusable = React.useCallback(function (currentElement) {
    return tabster === null || tabster === void 0 ? void 0 : tabster.focusable.findPrev({
      currentElement: currentElement
    });
  }, [tabster]);
  return {
    findAllFocusable: findAllFocusable,
    findFirstFocusable: findFirstFocusable,
    findLastFocusable: findLastFocusable,
    findNextFocusable: findNextFocusable,
    findPrevFocusable: findPrevFocusable
  };
};
//# sourceMappingURL=useFocusFinders.js.map