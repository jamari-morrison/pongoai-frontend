/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import * as Types from './Types';
import { DummyInputManager, TabsterPart, WeakHTMLElement } from './Utils';
declare class GroupperDummyManager extends DummyInputManager {
    private _tabster;
    constructor(element: WeakHTMLElement, tabster: Types.TabsterCore);
    private _onFocusDummyInput;
}
export declare class Groupper extends TabsterPart<Types.GroupperProps> implements Types.Groupper {
    private _shouldTabInside;
    private _first;
    _dummyManager?: GroupperDummyManager;
    constructor(tabster: Types.TabsterInternal, element: HTMLElement, props: Types.GroupperProps);
    dispose(): void;
    findNextTabbable(current: HTMLElement, prev?: boolean): Types.NextTabbable | null;
    makeTabbable(isTabbable: boolean): void;
    shouldTabInside(): boolean;
    isActive(): boolean | undefined;
    getFirst(): HTMLElement | undefined;
    setFirst(element: HTMLElement | undefined): void;
    acceptElement(element: HTMLElement, state: Types.FocusableAcceptElementState): number | undefined;
}
export declare class GroupperAPI implements Types.GroupperAPI, Types.GroupperInternalAPI {
    private _tabster;
    private _initTimer;
    private _win;
    private _current;
    constructor(tabster: Types.TabsterCore, getWindow: Types.GetWindow);
    private _init;
    protected dispose(): void;
    static dispose(instance: Types.GroupperAPI): void;
    static createGroupper: Types.GroupperConstructor;
    forgetCurrentGrouppers(): void;
    private _onFocus;
    private _onMouseDown;
    private _updateCurrent;
    private _onKeyDown;
}
export {};
