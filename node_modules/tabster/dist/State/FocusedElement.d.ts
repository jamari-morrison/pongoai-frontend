/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Subscribable } from './Subscribable';
import * as Types from '../Types';
export declare class FocusedElementState extends Subscribable<HTMLElement | undefined, Types.FocusedElementDetails> implements Types.FocusedElementState {
    private static _lastResetElement;
    private _tabster;
    private _initTimer;
    private _win;
    private _nextVal;
    private _lastVal;
    constructor(tabster: Types.TabsterInternal, getWindow: Types.GetWindow);
    private _init;
    protected dispose(): void;
    static dispose(instance: Types.FocusedElementState): void;
    static forgetMemorized(instance: Types.FocusedElementState, parent: HTMLElement): void;
    getFocusedElement(): HTMLElement | undefined;
    getLastFocusedElement(): HTMLElement | undefined;
    focus(element: HTMLElement, noFocusedProgrammaticallyFlag?: boolean, noAccessibleCheck?: boolean): boolean;
    focusDefault(container: HTMLElement): boolean;
    focusFirst(props: Types.FindFirstProps): boolean;
    focusLast(props: Types.FindFirstProps): boolean;
    resetFocus(container: HTMLElement): boolean;
    private _setOrRemoveAttribute;
    private _setFocusedElement;
    protected setVal(val: HTMLElement | undefined, details: Types.FocusedElementDetails): void;
    private _onFocusIn;
    private _onFocusOut;
    static findNextTabbable(tabster: Types.TabsterCore, ctx: Types.TabsterContext, from: HTMLElement | null, prev?: boolean): Types.NextTabbable | null;
    private _validateFocusedElement;
    private _onKeyDown;
    private _moveToUncontrolled;
}
