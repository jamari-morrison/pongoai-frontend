/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import * as Types from './Types';
import { DummyInputManager, TabsterPart, WeakHTMLElement } from './Utils';
declare class MoverDummyManager extends DummyInputManager {
    private _tabster;
    private _getMemorized;
    constructor(element: WeakHTMLElement, tabster: Types.TabsterCore, getMemorized: () => WeakHTMLElement | undefined);
    private _onFocusDummyInput;
}
export declare class Mover extends TabsterPart<Types.MoverProps> implements Types.Mover {
    private _unobserve;
    private _onChangeTimer;
    private _domChangedTimer;
    private _current;
    private _prevCurrent;
    private _visible;
    private _prevVisible;
    private _hasFullyVisible;
    private _updateVisibleTimer;
    private _focusables;
    private _win;
    private _onDispose;
    _dummyManagner?: MoverDummyManager;
    constructor(tabster: Types.TabsterInternal, element: HTMLElement, onDispose: (mover: Mover) => void, props: Types.MoverProps);
    dispose(): void;
    setCurrent(element: HTMLElement | undefined): boolean;
    getCurrent(): HTMLElement | null;
    findNextTabbable(current: HTMLElement, prev?: boolean): Types.NextTabbable | null;
    acceptElement(element: HTMLElement, state: Types.FocusableAcceptElementState): number | undefined;
    private _observeState;
    private _domChanged;
    forceUpdate(): void;
    private _processOnChange;
    getState(element: HTMLElement): Types.MoverElementState | undefined;
    updateVisible(updateParents: boolean): void;
}
export declare class MoverAPI implements Types.MoverAPI {
    private _tabster;
    private _initTimer;
    private _win;
    private _scrollTimer;
    private _scrollTargets;
    private _movers;
    constructor(tabster: Types.TabsterCore, getWindow: Types.GetWindow);
    private _init;
    protected dispose(): void;
    static dispose(instance: Types.MoverAPI): void;
    static createMover: Types.MoverConstructor;
    private _onMoverDispose;
    private _onFocus;
    private _updateVisible;
    private _onScroll;
    private _onKeyDown;
    private _isIgnoredInput;
}
export {};
