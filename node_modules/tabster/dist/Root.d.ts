/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import * as Types from './Types';
import { TabsterPart } from './Utils';
export interface WindowWithTabsterInstance extends Window {
    __tabsterInstance?: Types.TabsterCore;
}
export declare class Root extends TabsterPart<Types.RootProps, undefined> implements Types.Root {
    readonly uid: string;
    private _dummyManager?;
    private _isFocused;
    private _setFocusedTimer;
    constructor(tabster: Types.TabsterInternal, element: HTMLElement, props: Types.RootProps);
    dispose(): void;
    moveOutWithDefaultAction(backwards: boolean): void;
    private _setFocused;
    private _onFocus;
    private _add;
    private _remove;
}
export declare class RootAPI implements Types.RootAPI {
    private _tabster;
    private _win;
    private _initTimer;
    private _autoRoot;
    private _autoRootInstance;
    rootById: {
        [id: string]: Types.Root;
    };
    eventTarget: EventTarget;
    constructor(tabster: Types.TabsterCore, autoRoot?: Types.RootProps);
    private _init;
    protected dispose(): void;
    static dispose(instance: Types.RootAPI): void;
    static createRoot: Types.RootConstructor;
    static getRootByUId(getWindow: Types.GetWindow, id: string): Types.Root | undefined;
    /**
     * Fetches the tabster context for an element walking up its ancestors
     *
     * @param tabster Tabster instance
     * @param element The element the tabster context should represent
     * @param options Additional options
     * @returns undefined if the element is not a child of a tabster root, otherwise all applicable tabster behaviours and configurations
     */
    static getTabsterContext(tabster: Types.TabsterCore, element: Node, options?: Types.GetTabsterContextOptions): Types.TabsterContext | undefined;
    static onRoot(instance: Types.RootAPI, root: Types.Root, removed?: boolean): void;
}
