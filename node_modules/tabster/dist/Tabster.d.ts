/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { WindowWithTabsterInstance } from './Root';
import * as Types from './Types';
import { setBasics as overrideBasics } from './Utils';
export { Types };
/**
 * Extends Window to include an internal Tabster instance.
 */
declare class Tabster implements Types.TabsterCore, Types.TabsterInternal {
    private _storage;
    private _unobserve;
    private _win;
    private _forgetMemorizedTimer;
    private _forgetMemorizedElements;
    _version: string;
    _noop: boolean;
    keyboardNavigation: Types.KeyboardNavigationState;
    focusedElement: Types.FocusedElementState;
    focusable: Types.FocusableAPI;
    root: Types.RootAPI;
    uncontrolled: Types.UncontrolledAPI;
    controlTab: boolean;
    internal: Types.InternalAPI;
    groupper?: Types.GroupperAPI;
    mover?: Types.MoverAPI;
    outline?: Types.OutlineAPI;
    deloser?: Types.DeloserAPI;
    modalizer?: Types.ModalizerAPI;
    observedElement?: Types.ObservedElementAPI;
    crossOrigin?: Types.CrossOriginAPI;
    groupperDispose?: Types.DisposeFunc;
    moverDispose?: Types.DisposeFunc;
    outlineDispose?: Types.DisposeFunc;
    rootDispose?: Types.DisposeFunc;
    deloserDispose?: Types.DisposeFunc;
    modalizerDispose?: Types.DisposeFunc;
    observedElementDispose?: Types.DisposeFunc;
    crossOriginDispose?: Types.DisposeFunc;
    createRoot: Types.RootConstructor;
    updateRoot: (root: Types.Root, removed?: boolean) => void;
    createGroupper?: Types.GroupperConstructor;
    createMover?: Types.MoverConstructor;
    createDeloser?: Types.DeloserConstructor;
    createModalizer?: Types.ModalizerConstructor;
    updateObserved?: (element: HTMLElement) => void;
    updateModalizer?: (modalzier: Types.Modalizer, removed?: boolean) => void;
    constructor(win: Window, props?: Types.TabsterCoreProps);
    protected dispose(): void;
    static dispose(instance: Types.TabsterCore): void;
    storageEntry(element: HTMLElement, addremove?: boolean): Types.TabsterElementStorageEntry | undefined;
    getWindow: () => WindowWithTabsterInstance;
    static forceCleanup(tabster: Tabster): void;
}
export { overrideBasics };
export declare function forceCleanup(tabster: Tabster): void;
/**
 * Creates an instance of Tabster, returns the current window instance if it already exists.
 */
export declare function createTabster(win: Window, props?: Types.TabsterCoreProps): Types.TabsterCore;
/**
 * Creates a new groupper instance or returns an existing one
 * @param tabster Tabster instance
 */
export declare function getGroupper(tabster: Types.TabsterCore): Types.GroupperAPI;
/**
 * Creates a new mover instance or returns an existing one
 * @param tabster Tabster instance
 */
export declare function getMover(tabster: Types.TabsterCore): Types.MoverAPI;
export declare function getOutline(tabster: Types.TabsterCore): Types.OutlineAPI;
/**
 * Creates a new new deloser instance or returns an existing one
 * @param tabster Tabster instance
 * @param props Deloser props
 */
export declare function getDeloser(tabster: Types.TabsterCore, props?: {
    autoDeloser: Types.DeloserProps;
}): Types.DeloserAPI;
/**
 * Creates a new modalizer instance or returns an existing one
 * @param tabster Tabster instance
 */
export declare function getModalizer(tabster: Types.TabsterCore): Types.ModalizerAPI;
export declare function getObservedElement(tabster: Types.TabsterCore): Types.ObservedElementAPI;
export declare function getCrossOrigin(tabster: Types.TabsterCore): Types.CrossOriginAPI;
export declare function getInternal(tabster: Types.TabsterCore): Types.InternalAPI;
export declare function disposeTabster(tabster: Types.TabsterCore): void;
export declare function getTabsterAttribute(props: Types.TabsterAttributeProps): Types.TabsterDOMAttribute;
export declare function getTabsterAttribute(props: Types.TabsterAttributeProps, plain: true): string;
/**
 * Sets or updates Tabster attribute of the element.
 * @param element an element to set data-tabster attribute on.
 * @param newProps new Tabster props to set.
 * @param update if true, newProps will be merged with the existing props.
 *  When true and the value of a property in newProps is undefined, the property
 *  will be removed from the attribute.
 */
export declare function setTabsterAttribute(element: HTMLElement, newProps: Types.TabsterAttributeProps, update?: boolean): void;
/**
 * Returns an instance of Tabster if it already exists on the window .
 * @param win window instance that could contain an Tabster instance.
 */
export declare function getCurrentTabster(win: Window): Types.TabsterCore | undefined;
export declare function makeNoOp(tabster: Types.TabsterCore, noop: boolean): void;
export declare function isNoOp(tabster: Types.TabsterCore): boolean;
