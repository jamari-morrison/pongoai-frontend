import { useEventCallback } from '@fluentui/react-utilities';
export var useButtonState = function (state) {
    var disabled = state.disabled;
    var _a = state.root, _b = _a.as, as = _b === void 0 ? 'button' : _b, tabIndex = _a.tabIndex, role = _a.role, onClickCallback = _a.onClick, onKeyDownCallback = _a.onKeyDown, onKeyUpCallback = _a.onKeyUp;
    /**
     * Button event callback for when the root is not rendered as a button (EX: anchor).
     */
    var onButtonClick = useEventCallback(function (ev) {
        if (!disabled && !ev.isDefaultPrevented()) {
            onClickCallback === null || onClickCallback === void 0 ? void 0 : onClickCallback(ev);
        }
        else {
            ev.preventDefault();
            ev.stopPropagation();
        }
    });
    /**
     * Button event callback for when the root is not rendered as a button (EX: anchor).
     */
    var onButtonKeydown = useEventCallback(function (ev) {
        if (!disabled && !ev.isDefaultPrevented()) {
            onKeyDownCallback === null || onKeyDownCallback === void 0 ? void 0 : onKeyDownCallback(ev);
            switch (ev.key) {
                case 'Enter':
                    ev.preventDefault();
                    ev.currentTarget.click();
                    break;
                case 'Space':
                    ev.preventDefault();
                    break;
                default:
            }
        }
        else {
            ev.preventDefault();
            ev.stopPropagation();
        }
    });
    /**
     * Button event callback for when the root is not rendered as a button (EX: anchor).
     */
    var onButtonKeyup = useEventCallback(function (ev) {
        if (!disabled && !ev.isDefaultPrevented()) {
            onKeyUpCallback === null || onKeyUpCallback === void 0 ? void 0 : onKeyUpCallback(ev);
            switch (ev.key) {
                case 'Enter':
                    ev.preventDefault();
                    ev.currentTarget.click();
                    break;
                case 'Space':
                    ev.preventDefault();
                    break;
                default:
            }
        }
        else {
            ev.preventDefault();
            ev.stopPropagation();
        }
    });
    // If the button is rendered as an anchor or other element apply these props:
    if (as !== 'button') {
        state.root['aria-disabled'] = disabled;
        state.root.onClick = onButtonClick;
        state.root.onKeyDown = onButtonKeydown;
        state.root.onKeyUp = onButtonKeyup;
        state.root.role = role !== null && role !== void 0 ? role : 'button';
        state.root.tabIndex = disabled ? undefined : tabIndex !== null && tabIndex !== void 0 ? tabIndex : 0;
    }
    // Otherwise if it is a button:
    else {
        disabled && (state.root.disabled = disabled);
    }
    return state;
};
//# sourceMappingURL=useButtonState.js.map