"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonColorExample = exports.BasicButtonExample = void 0;
var React = __importStar(require("react"));
var index_1 = require("./index");
var react_text_1 = require("@pongoai/react-text");
var react_make_styles_1 = require("@fluentui/react-make-styles");
var useStyles = react_make_styles_1.makeStyles({
    root: {
        display: 'inline-flex',
        flexDirection: 'column',
        gap: '10px',
    },
    row: {
        display: 'inline-flex',
        flexDirection: 'row',
        gap: '10px',
    },
});
var BasicButtonExample = function () {
    var styles = useStyles();
    return (React.createElement("div", { className: styles.root },
        React.createElement(react_text_1.Header2, null, "Appearance"),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { appearance: "outline" }, "Outline"),
            React.createElement(index_1.Button, { appearance: "primary" }, "Primary"),
            React.createElement(index_1.Button, { appearance: "subtle" }, "Subtle"),
            React.createElement(index_1.Button, { appearance: "transparent" }, "Transparent")),
        React.createElement(react_text_1.Header2, null, "Disabled"),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { disabled: true }, "Outline"),
            React.createElement(index_1.Button, { appearance: "primary", disabled: true }, "Primary"),
            React.createElement(index_1.Button, { appearance: "subtle", disabled: true }, "Subtle"),
            React.createElement(index_1.Button, { appearance: "transparent", disabled: true }, "Transparent")),
        React.createElement(react_text_1.Header2, null, "Shape"),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { shape: "rounded" }, "Rounded"),
            React.createElement(index_1.Button, { shape: "circular" }, "Circular"),
            React.createElement(index_1.Button, { shape: "circle" }, "Circle"),
            React.createElement(index_1.Button, { shape: "square" }, "Square")),
        React.createElement(react_text_1.Header2, null, "Size"),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { size: "small" }, "Small"),
            React.createElement(index_1.Button, { size: "medium" }, "Medium"),
            React.createElement(index_1.Button, { size: "large" }, "Large"))));
};
exports.BasicButtonExample = BasicButtonExample;
var ButtonColorExample = function () {
    var styles = useStyles();
    return (React.createElement("div", { className: styles.root },
        React.createElement(react_text_1.Header2, null, "Color"),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "inherit", appearance: "outline" }, "Inherit"),
            React.createElement(index_1.Button, { color: "inherit", appearance: "primary" }, "Inherit"),
            React.createElement(index_1.Button, { color: "inherit", appearance: "subtle" }, "Inherit"),
            React.createElement(index_1.Button, { color: "inherit", appearance: "transparent" }, "Inherit")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "brand", appearance: "outline" }, "Brand"),
            React.createElement(index_1.Button, { color: "brand", appearance: "primary" }, "Brand"),
            React.createElement(index_1.Button, { color: "brand", appearance: "subtle" }, "Brand"),
            React.createElement(index_1.Button, { color: "brand", appearance: "transparent" }, "Brand")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "secondary", appearance: "outline" }, "Secondary"),
            React.createElement(index_1.Button, { color: "secondary", appearance: "primary" }, "Secondary"),
            React.createElement(index_1.Button, { color: "secondary", appearance: "subtle" }, "Secondary"),
            React.createElement(index_1.Button, { color: "secondary", appearance: "transparent" }, "Secondary")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "success", appearance: "outline" }, "Success"),
            React.createElement(index_1.Button, { color: "success", appearance: "primary" }, "Success"),
            React.createElement(index_1.Button, { color: "success", appearance: "subtle" }, "Success"),
            React.createElement(index_1.Button, { color: "success", appearance: "transparent" }, "Success")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "error", appearance: "outline" }, "Error"),
            React.createElement(index_1.Button, { color: "error", appearance: "primary" }, "Error"),
            React.createElement(index_1.Button, { color: "error", appearance: "subtle" }, "Error"),
            React.createElement(index_1.Button, { color: "error", appearance: "transparent" }, "Error")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "social", appearance: "outline" }, "Social"),
            React.createElement(index_1.Button, { color: "social", appearance: "primary" }, "Social"),
            React.createElement(index_1.Button, { color: "social", appearance: "subtle" }, "Social"),
            React.createElement(index_1.Button, { color: "social", appearance: "transparent" }, "Social")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "warning", appearance: "outline" }, "Warning"),
            React.createElement(index_1.Button, { color: "warning", appearance: "primary" }, "Warning"),
            React.createElement(index_1.Button, { color: "warning", appearance: "subtle" }, "Warning"),
            React.createElement(index_1.Button, { color: "warning", appearance: "transparent" }, "Warning")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "info", appearance: "outline" }, "Info"),
            React.createElement(index_1.Button, { color: "info", appearance: "primary" }, "Info"),
            React.createElement(index_1.Button, { color: "info", appearance: "subtle" }, "Info"),
            React.createElement(index_1.Button, { color: "info", appearance: "transparent" }, "Info")),
        React.createElement(react_text_1.Header2, null, "Disabled"),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "inherit", appearance: "outline", disabled: true }, "Inherit"),
            React.createElement(index_1.Button, { color: "inherit", appearance: "primary", disabled: true }, "Inherit"),
            React.createElement(index_1.Button, { color: "inherit", appearance: "subtle", disabled: true }, "Inherit"),
            React.createElement(index_1.Button, { color: "inherit", appearance: "transparent", disabled: true }, "Inherit")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "brand", appearance: "outline", disabled: true }, "Brand"),
            React.createElement(index_1.Button, { color: "brand", appearance: "primary", disabled: true }, "Brand"),
            React.createElement(index_1.Button, { color: "brand", appearance: "subtle", disabled: true }, "Brand"),
            React.createElement(index_1.Button, { color: "brand", appearance: "transparent", disabled: true }, "Brand")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "secondary", appearance: "outline", disabled: true }, "Secondary"),
            React.createElement(index_1.Button, { color: "secondary", appearance: "primary", disabled: true }, "Secondary"),
            React.createElement(index_1.Button, { color: "secondary", appearance: "subtle", disabled: true }, "Secondary"),
            React.createElement(index_1.Button, { color: "secondary", appearance: "transparent", disabled: true }, "Secondary")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "success", appearance: "outline", disabled: true }, "Success"),
            React.createElement(index_1.Button, { color: "success", appearance: "primary", disabled: true }, "Success"),
            React.createElement(index_1.Button, { color: "success", appearance: "subtle", disabled: true }, "Success"),
            React.createElement(index_1.Button, { color: "success", appearance: "transparent", disabled: true }, "Success")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "error", appearance: "outline", disabled: true }, "Error"),
            React.createElement(index_1.Button, { color: "error", appearance: "primary", disabled: true }, "Error"),
            React.createElement(index_1.Button, { color: "error", appearance: "subtle", disabled: true }, "Error"),
            React.createElement(index_1.Button, { color: "error", appearance: "transparent", disabled: true }, "Error")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "social", appearance: "outline", disabled: true }, "Social"),
            React.createElement(index_1.Button, { color: "social", appearance: "primary", disabled: true }, "Social"),
            React.createElement(index_1.Button, { color: "social", appearance: "subtle", disabled: true }, "Social"),
            React.createElement(index_1.Button, { color: "social", appearance: "transparent", disabled: true }, "Social")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "warning", appearance: "outline", disabled: true }, "Warning"),
            React.createElement(index_1.Button, { color: "warning", appearance: "primary", disabled: true }, "Warning"),
            React.createElement(index_1.Button, { color: "warning", appearance: "subtle", disabled: true }, "Warning"),
            React.createElement(index_1.Button, { color: "warning", appearance: "transparent", disabled: true }, "Warning")),
        React.createElement("div", { className: styles.row },
            React.createElement(index_1.Button, { color: "info", appearance: "outline", disabled: true }, "Info"),
            React.createElement(index_1.Button, { color: "info", appearance: "primary", disabled: true }, "Info"),
            React.createElement(index_1.Button, { color: "info", appearance: "subtle", disabled: true }, "Info"),
            React.createElement(index_1.Button, { color: "info", appearance: "transparent", disabled: true }, "Info"))));
};
exports.ButtonColorExample = ButtonColorExample;
exports.default = {
    title: 'Components/Button',
    component: index_1.Button,
};
//# sourceMappingURL=Button.stories.js.map