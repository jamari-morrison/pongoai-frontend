"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var Button_1 = require("./Button");
var isConformant_1 = require("../../common/isConformant");
var react_2 = require("@testing-library/react");
//credit to https://github.com/microsoft/fluentui for being the base of this set of tests
describe('Button', function () {
    var renderedComponent;
    var buttonRef = react_1.default.createRef();
    isConformant_1.isConformant({
        Component: Button_1.Button,
        displayName: 'Button',
    });
    //to add more tests when the "as" parameter is filled out
    describe('when rendered as a button', function () {
        it('respects id prop', function () {
            renderedComponent = react_2.render(react_1.default.createElement(Button_1.Button, { id: "testing-id", "data-testid": "button" }, "Default Button"));
            expect(renderedComponent.getByTestId('button').id).toEqual('testing-id');
        });
        it('can be focused', function () {
            var result = react_2.render(react_1.default.createElement(Button_1.Button, null, "This is a button"));
            var button = result.getByRole('button');
            expect(document.activeElement).not.toEqual(button);
            button.focus();
            expect(document.activeElement).toEqual(button);
        });
        it('cannot be focused when disabled has been passed to the component', function () {
            var result = react_2.render(react_1.default.createElement(Button_1.Button, { disabled: true }, "This is a button"));
            var button = result.getByRole('button');
            expect(document.activeElement).not.toEqual(button);
            button.focus();
            expect(document.activeElement).not.toEqual(button);
        });
        it('can trigger a function by being clicked', function () {
            var onClick = jest.fn();
            var result = react_2.render(react_1.default.createElement(Button_1.Button, { onClick: onClick }, "This is a button"));
            react_2.fireEvent.click(result.getByRole('button'));
            expect(onClick).toHaveBeenCalled();
        });
        it('does not trigger a function by being clicked when button is disabled', function () {
            var onClick = jest.fn();
            var result = react_2.render(react_1.default.createElement(Button_1.Button, { disabled: true, onClick: onClick }, "This is a button"));
            react_2.fireEvent.click(result.getByRole('button'));
            expect(onClick).not.toHaveBeenCalled();
        });
    });
    describe('when rendered as an anchor', function () {
        it('renders correctly', function () {
            var result = react_2.render(react_1.default.createElement(Button_1.Button, { as: "a", href: "https://www.bing.com" }, "This is a button"));
            var anchor = result.getByRole('button');
            expect(anchor.tagName).toBe('A');
            expect(result.container).toMatchSnapshot();
        });
        it('can be focused', function () {
            var result = react_2.render(react_1.default.createElement(Button_1.Button, { as: "a", href: "https://www.bing.com" }, "This is a button"));
            var anchor = result.getByRole('button');
            expect(document.activeElement).not.toEqual(anchor);
            anchor.focus();
            expect(document.activeElement).toEqual(anchor);
        });
        it('cannot be focused when disabled has been passed to the component', function () {
            var result = react_2.render(react_1.default.createElement(Button_1.Button, { disabled: true, as: "a" }, "This is a button"));
            var anchor = result.getByRole('button');
            expect(document.activeElement).not.toEqual(anchor);
            anchor.focus();
            expect(document.activeElement).not.toEqual(anchor);
        });
    });
});
//# sourceMappingURL=Button.test.js.map