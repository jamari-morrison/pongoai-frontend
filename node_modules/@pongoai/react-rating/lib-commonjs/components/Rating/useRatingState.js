"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRatingState = exports.disabledInactiveStarClassName = exports.disabledActiveStarClassName = exports.inactiveStarClassName = exports.activeStarClassName = void 0;
const React = __importStar(require("react"));
const react_utilities_1 = require("@fluentui/react-utilities");
const react_shared_contexts_1 = require("@fluentui/react-shared-contexts");
const DefaultIcons_1 = require("./DefaultIcons");
exports.activeStarClassName = 'star-active';
exports.inactiveStarClassName = 'star-inactive';
exports.disabledActiveStarClassName = 'disabled-star-active';
exports.disabledInactiveStarClassName = 'disabled-star-inactive';
/**
 * Calculates the current position of the Rating
 */
const calculateSteps = (ev, starWrapperRef, min, max, step, dir) => {
    const currentBounds = starWrapperRef?.current?.getBoundingClientRect();
    const sliderSize = currentBounds.width || 0;
    let position;
    if (dir === 'rtl') {
        position = currentBounds.right;
    }
    else {
        position = currentBounds.left;
    }
    const totalSteps = (max - min) / step;
    const stepLength = sliderSize / totalSteps;
    const thumbPosition = ev.clientX;
    const distance = dir === 'rtl' ? position - thumbPosition : thumbPosition - position;
    return react_utilities_1.clamp(min + step * (distance / stepLength), min, max);
};
const on = (element, eventName, callback, useCapture) => {
    element.addEventListener(eventName, callback, useCapture);
    return () => element.removeEventListener(eventName, callback, useCapture);
};
const useRatingState = (state) => {
    const { value, defaultValue = 0, max = 5, step, onChange, readOnly, disabled } = state;
    const { onPointerDown: onPointerDownCallback, onKeyDown: onKeyDownCallback } = state.root;
    const { dir } = react_shared_contexts_1.useFluent();
    const [currentValue, setCurrentValue] = react_utilities_1.useControllableState({
        state: value && react_utilities_1.clamp(value, 0, max),
        defaultState: react_utilities_1.clamp(defaultValue, 0, max),
        initialState: 0,
    });
    const starWrapperRef = React.useRef(null);
    const inputRef = React.useRef(null);
    const disposables = React.useRef([]);
    /**
     * Updates the controlled `currentValue` to the new `incomingValue` and clamps it.
     */
    const updateValue = react_utilities_1.useEventCallback((incomingValue, ev) => {
        const clampedValue = react_utilities_1.clamp(incomingValue, 0, max);
        if (clampedValue !== 0 && clampedValue !== max) {
            ev.stopPropagation();
            if (ev.type === 'keydown') {
                ev.preventDefault();
            }
        }
        onChange?.(ev, { value: clampedValue });
        setCurrentValue(clampedValue);
    });
    const onInputChange = (ev) => {
        updateValue(Number(ev.target.value), ev);
    };
    const renderStars = () => {
        const elements = [];
        for (let i = 1; i <= max; i++) {
            const isChecked = currentValue >= i;
            const starClassName = !disabled
                ? isChecked
                    ? 'star-active'
                    : 'star-inactive'
                : isChecked
                    ? 'disabled-star-active'
                    : 'disabled-star-inactive';
            elements.push(React.createElement("span", { className: starClassName, key: 'starWrapper-' + i },
                React.createElement(DefaultIcons_1.RatingStarIcon, null)));
        }
        return elements;
    };
    const getCount = () => {
        const gridTemplateColumnsCount = [];
        for (let i = 1; i <= max; i++) {
            gridTemplateColumnsCount.push('25%');
        }
        return gridTemplateColumnsCount.join('');
    };
    const onPointerMove = React.useCallback((ev) => {
        const position = calculateSteps(ev, starWrapperRef, 1, max, step, dir);
        const currentStepPosition = Math.round(position / step) * step;
        updateValue(currentStepPosition, ev);
    }, [dir, max, step, updateValue]);
    const onPointerUp = React.useCallback((ev) => {
        disposables.current.forEach(dispose => dispose());
        disposables.current = [];
        calculateSteps(ev, starWrapperRef, 1, max, step, dir) === currentValue && updateValue(0, ev);
        console.log(calculateSteps(ev, starWrapperRef, 1, max, step, dir));
        inputRef.current.focus();
    }, []);
    const onStarWrapperPointerDown = React.useCallback((ev) => {
        const { pointerId } = ev;
        const target = ev.target;
        target.setPointerCapture?.(pointerId);
        onPointerDownCallback?.(ev);
        disposables.current.push(on(target, 'pointermove', onPointerMove), on(target, 'pointerup', onPointerUp), () => {
            target.releasePointerCapture?.(pointerId);
        });
        onPointerMove(ev);
    }, [onPointerDownCallback, onPointerMove]);
    const starWrapperStyles = {
        gridTemplateColumns: getCount(),
    };
    state.starWrapper.children = renderStars();
    state.starWrapper.style = starWrapperStyles;
    state.starWrapper.ref = react_utilities_1.useMergedRefs(state.starWrapper.ref, starWrapperRef);
    if (!readOnly && !disabled) {
        state.starWrapper.onPointerDown = onStarWrapperPointerDown;
    }
    if (!readOnly) {
        state.input.ref = react_utilities_1.useMergedRefs(state.input.ref, inputRef);
        state.input.value = currentValue;
        state.input.min = 1;
        state.input.max = max;
        state.input.step = step;
        state.input.disabled = disabled;
        state.input.onChange = onInputChange;
        state.input.tabIndex = 0;
    }
    return state;
};
exports.useRatingState = useRatingState;
//# sourceMappingURL=useRatingState.js.map