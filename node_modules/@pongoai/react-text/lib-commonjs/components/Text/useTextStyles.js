"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTextStyles = void 0;
const react_make_styles_1 = require("@fluentui/react-make-styles");
const useRootStyles = react_make_styles_1.makeStyles({
    root: {
        textAlign: 'start',
        display: 'inline',
        whiteSpace: 'normal',
        overflow: 'visible',
        textOverflow: 'clip',
        margin: '0px',
    },
    base: (theme) => ({
        fontFamily: theme.fonts.fontFamily.base,
    }),
    monospace: (theme) => ({
        fontFamily: theme.fonts.fontFamily.monospace,
    }),
    thin: (theme) => ({
        fontWeight: theme.fonts.fontWeight.thin,
    }),
    light: (theme) => ({
        fontWeight: theme.fonts.fontWeight.light,
    }),
    regular: (theme) => ({
        fontWeight: theme.fonts.fontWeight.regular,
    }),
    medium: (theme) => ({
        fontWeight: theme.fonts.fontWeight.medium,
    }),
    bold: (theme) => ({
        fontWeight: theme.fonts.fontWeight.bold,
    }),
    black: (theme) => ({
        fontWeight: theme.fonts.fontWeight.black,
    }),
    italic: {
        fontStyle: 'italic',
    },
    underline: {
        textDecoration: 'underline',
    },
    strikethrough: {
        textDecoration: 'line-through',
    },
    strikethroughUnderline: {
        textDecoration: 'line-through underline',
    },
    100: (theme) => ({
        fontSize: theme.fonts.fontSize[100],
        lineHeight: theme.fonts.fontLineHeight[1000],
    }),
    200: (theme) => ({
        fontSize: theme.fonts.fontSize[200],
        lineHeight: theme.fonts.fontLineHeight[200],
    }),
    300: (theme) => ({
        fontSize: theme.fonts.fontSize[300],
        lineHeight: theme.fonts.fontLineHeight[300],
    }),
    400: (theme) => ({
        fontSize: theme.fonts.fontSize[400],
        lineHeight: theme.fonts.fontLineHeight[400],
    }),
    500: (theme) => ({
        fontSize: theme.fonts.fontSize[500],
        lineHeight: theme.fonts.fontLineHeight[500],
    }),
    600: (theme) => ({
        fontSize: theme.fonts.fontSize[600],
        lineHeight: theme.fonts.fontLineHeight[600],
    }),
    700: (theme) => ({
        fontSize: theme.fonts.fontSize[700],
        lineHeight: theme.fonts.fontLineHeight[700],
    }),
    800: (theme) => ({
        fontSize: theme.fonts.fontSize[800],
        lineHeight: theme.fonts.fontLineHeight[800],
    }),
    900: (theme) => ({
        fontSize: theme.fonts.fontSize[900],
        lineHeight: theme.fonts.fontLineHeight[900],
    }),
    1000: (theme) => ({
        fontSize: theme.fonts.fontSize[1000],
        lineHeight: theme.fonts.fontLineHeight[1000],
    }),
    inherit: (theme) => ({
        color: theme.palette.inherit,
    }),
    baseColor: (theme) => ({
        color: theme.palette.base,
    }),
    neutralColor: (theme) => ({
        color: theme.palette.neutral,
    }),
    brandColor: (theme) => ({
        color: theme.palette.brand,
    }),
    secondaryColor: (theme) => ({
        color: theme.palette.secondary,
    }),
    successColor: (theme) => ({
        color: theme.palette.success,
    }),
    errorColor: (theme) => ({
        color: theme.palette.error,
    }),
    socialColor: (theme) => ({
        color: theme.palette.social,
    }),
    warningColor: (theme) => ({
        color: theme.palette.warning,
    }),
    infoColor: (theme) => ({
        color: theme.palette.info,
    }),
});
const useTextStyles = (state) => {
    const styles = useRootStyles();
    state.root.className = react_make_styles_1.mergeClasses(styles.root, styles[state.font], styles[state.weight], styles[state.size], state.italic && styles.italic, state.underline && styles.underline, state.strikethrough && styles.strikethrough, state.underline && state.strikethrough && styles.strikethroughUnderline, styles[(state.color + 'Color')], state.root.className);
    return state;
};
exports.useTextStyles = useTextStyles;
//# sourceMappingURL=useTextStyles.js.map