import React from 'react';
import { Search } from './Search';
import { isConformant } from '../../common/isConformant';
import { render, screen, fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { resetIdsForTests } from '@fluentui/react-utilities';
describe('Search', () => {
    let renderedComponent;
    let textfieldRef = React.createRef();
    isConformant({
        Component: Search,
        displayName: 'Search',
        testOptions: {
            'make-styles-overrides-win': {
                callCount: 1,
            },
        },
    });
    beforeEach(() => {
        resetIdsForTests();
    });
    afterEach(() => {
        textfieldRef = React.createRef();
        if (renderedComponent) {
            renderedComponent.unmount();
            renderedComponent = undefined;
        }
    });
    it('respects id prop', () => {
        renderedComponent = render(React.createElement(Search, { id: "testing-id", "data-testid": "textfield" }));
        expect(renderedComponent.getByTestId('textfield').id).toEqual('testing-id');
    });
    it('defaults to empty', () => {
        render(React.createElement(Search, { input: { ref: textfieldRef } }));
        expect(textfieldRef.current?.value).toBe('');
    });
    it('respects defaultValue prop', () => {
        render(React.createElement(Search, { input: { ref: textfieldRef }, defaultValue: "default" }));
        expect(textfieldRef.current?.value).toBe('default');
    });
    it('calls onChange with the correct value', () => {
        const eventHandler = jest.fn();
        render(React.createElement(Search, { input: { ref: textfieldRef }, onChange: eventHandler, "data-testid": "textfield" }));
        const input = screen.getByRole('searchbox');
        expect(eventHandler).toBeCalledTimes(0);
        fireEvent.change(input, { target: { value: 'changed' } });
        expect(eventHandler).toBeCalledTimes(2);
        expect(textfieldRef.current?.value).toBe('changed');
    });
    it('does not call onChange when disabled', () => {
        const eventHandler = jest.fn();
        render(React.createElement(Search, { disabled: true, input: { ref: textfieldRef }, onChange: eventHandler, "data-testid": "textfield" }));
        const input = screen.getByRole('searchbox');
        expect(eventHandler).toBeCalledTimes(0);
        userEvent.type(input, 'changed');
        expect(eventHandler).toBeCalledTimes(0);
        expect(textfieldRef.current?.value).toBe('');
    });
});
//# sourceMappingURL=Search.test.js.map