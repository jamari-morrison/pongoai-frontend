"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMultilineStyles = void 0;
const react_make_styles_1 = require("@fluentui/react-make-styles");
const index_1 = require("../TextField/index");
const useMultilineRootStyles = react_make_styles_1.makeStyles({
    root: {
        position: 'relative',
    },
});
const useTextAreaStyles = react_make_styles_1.makeStyles({
    textArea: (theme) => ({
        position: 'relative',
        marginTop: '6px',
        padding: '9px 10px 5px 10px',
        height: '45px',
        width: '300px',
        minHeight: '45px',
        minWidth: '100px',
        background: 'none',
        border: 'none',
        outline: 'none',
        display: 'block',
        boxSizing: 'border-box',
        fontSize: '18px',
        fontFamily: theme.fonts.fontFamily.base,
    }),
    lowerTextAlignment: {
        marginTop: '18px',
        paddingTop: '7px',
        minHeight: '35px',
        height: '35px',
    },
    disableResize: {
        resize: 'none',
    },
    autoAdjust: {
        overflow: 'hidden',
    },
});
const useMultilineBorderStyles = react_make_styles_1.makeStyles({
    multilineBorder: {
        position: 'relative',
        width: 'auto',
        height: 'auto',
        padding: '0px',
        margin: '0px',
        boxSizing: 'border-box',
        border: 'none',
        background: 'none',
    },
    enabled: {
        cursor: 'text',
    },
    disabled: {
        cursor: 'not-allowed',
    },
});
const useMultilineLabelTextStyles = react_make_styles_1.makeStyles({
    multilineLabel: (theme) => ({
        position: 'absolute',
        background: 'none',
        margin: '0px',
        padding: '17px 10px',
        fontSize: '18px',
        height: '10px',
        fontFamily: theme.fonts.fontFamily.base,
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        touchAction: 'none',
        pointerEvents: 'none',
        userSelect: 'none',
        transition: 'transform .1s cubic-bezier(0.33, 0.0, 0.67, 1), font-size .1s cubic-bezier(0.33, 0.0, 0.67, 1)',
    }),
    lowerTextAlignment: {
        height: '7px',
    },
});
const useTextFieldLegendStyles = react_make_styles_1.makeStyles({
    textFieldLegend: (theme) => ({
        position: 'relative',
        marginLeft: '5px',
        padding: '0px',
        visibility: 'hidden',
        height: '0px',
        fontFamily: theme.fonts.fontFamily.base,
        fontSize: '12px',
        '& span': {
            padding: '0px 5px',
            display: 'inline-block',
        },
    }),
    active: {
        width: 'auto',
    },
    inactive: {
        width: '0px',
    },
});
const useMultilineStyles = (state) => {
    const multilineRootStyles = useMultilineRootStyles();
    const rootStyles = index_1.useRootStyles();
    const textAreaStyles = useTextAreaStyles();
    const inputStyles = index_1.useInputStyles();
    const textFieldBorderStyles = index_1.useTextFieldBorderStyles();
    const multilineBorderStyles = useMultilineBorderStyles();
    const multilineLabelTextStyles = useMultilineLabelTextStyles();
    const labelTextStyles = index_1.useLabelStyles();
    const textFieldLegendStyles = useTextFieldLegendStyles();
    const helperTextStyles = index_1.useHelperTextStyles();
    state.root.className = react_make_styles_1.mergeClasses(multilineRootStyles.root, rootStyles.focusIndicator, !state.error && !state.disabled && rootStyles.inputFocus, state.label !== undefined && rootStyles[state.appearance], state.root.className);
    state.textFieldHelperText.className = react_make_styles_1.mergeClasses(helperTextStyles.helperText, state.disabled ? helperTextStyles.disabled : helperTextStyles.enabled, state.error && helperTextStyles.error, state.textFieldHelperText.className);
    state.textarea.className = react_make_styles_1.mergeClasses(textAreaStyles.textArea, state.label && state.placeholder && inputStyles.labelPlaceholderFocus, (state.appearance === 'filled' || state.appearance === 'standard') && textAreaStyles.lowerTextAlignment, !state.resizable && textAreaStyles.disableResize, state.disabled && inputStyles.disabled, state.autoAdjust && textAreaStyles.autoAdjust, state.textarea.className);
    state.textFieldBorder.className = react_make_styles_1.mergeClasses(index_1.textFieldBorderClassName, multilineBorderStyles.multilineBorder, textFieldBorderStyles[state.appearance], state.disabled && textFieldBorderStyles.disabled, state.error && textFieldBorderStyles.error, !state.disabled ? multilineBorderStyles.enabled : multilineBorderStyles.disabled, state.textFieldBorder.className);
    state.textFieldLabel.className = react_make_styles_1.mergeClasses(index_1.labelClassName, multilineLabelTextStyles.multilineLabel, !state.disabled ? labelTextStyles.enabled : labelTextStyles.disabled, state.error && labelTextStyles.error, state.textarea.value !== '' &&
        (state.label !== undefined ? labelTextStyles[state.appearance] : labelTextStyles.placeholder), (state.appearance === 'filled' || state.appearance === 'standard') && multilineLabelTextStyles.lowerTextAlignment, state.textFieldLabel.className);
    state.textFieldLegend.className = react_make_styles_1.mergeClasses(index_1.legendClassName, textFieldLegendStyles.textFieldLegend, state.textarea.value !== '' ? textFieldLegendStyles.active : textFieldLegendStyles.inactive, state.textFieldLegend.className);
};
exports.useMultilineStyles = useMultilineStyles;
//# sourceMappingURL=useMultilineStyles.js.map