"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const Select_1 = require("./Select");
const isConformant_1 = require("../../common/isConformant");
require("@testing-library/react");
const react_2 = require("@testing-library/react");
const react_utilities_1 = require("@fluentui/react-utilities");
describe('Select', () => {
    let renderedComponent;
    let textfieldRef = react_1.default.createRef();
    isConformant_1.isConformant({
        Component: Select_1.Select,
        displayName: 'Select',
        testOptions: {
            'make-styles-overrides-win': {
                callCount: 1,
            },
        },
    });
    beforeEach(() => {
        react_utilities_1.resetIdsForTests();
    });
    afterEach(() => {
        textfieldRef = react_1.default.createRef();
        if (renderedComponent) {
            renderedComponent.unmount();
            renderedComponent = undefined;
        }
    });
    it('respects id prop', () => {
        renderedComponent = react_2.render(react_1.default.createElement(Select_1.Select, { id: "testing-id", "data-testid": "select" }));
        expect(renderedComponent.getByTestId('select').id).toEqual('testing-id');
    });
    it('defaults to empty value', () => {
        react_2.render(react_1.default.createElement(Select_1.Select, { input: { ref: textfieldRef }, options: [
                { value: 'USD', label: '$' },
                { value: 'EUR', label: '€' },
                { value: 'BTC', label: '฿' },
                { value: 'JPY', label: '¥' },
            ] }));
        expect(textfieldRef.current?.value).toBe('');
    });
    //doesn't respect defaultValue prop
    // it('respects defaultValue prop', () => {
    //   render(
    //     <Select
    //       input={{ ref: textfieldRef }}
    //       defaultValue="EUR"
    //       options={[
    //         { value: 'USD', label: '$' },
    //         { value: 'EUR', label: '€' },
    //         { value: 'BTC', label: '฿' },
    //         { value: 'JPY', label: '¥' },
    //       ]}
    //     />,
    //   );
    //   expect(textfieldRef.current?.value).toBe('EUR');
    // });
    // it('calls onChange with the correct value', () => {
    //   const eventHandler = jest.fn();
    //   render(
    //     <Select
    //       input={{ ref: textfieldRef }}
    //       onChange={eventHandler}
    //       data-testid="textfield"
    //       options={[
    //         { value: 'USD', label: '$' },
    //         { value: 'EUR', label: '€' },
    //         { value: 'BTC', label: '฿' },
    //         { value: 'JPY', label: '¥' },
    //       ]}
    //     />,
    //   );
    //   const input = screen.getByRole('combobox') as HTMLInputElement;
    //   expect(eventHandler).toBeCalledTimes(0);
    //   fireEvent.change(input, { target: { value: 'EUR' } });
    //   expect(eventHandler).toBeCalledTimes(1);
    //   expect(textfieldRef.current?.value).toBe('EUR');
    // });
});
//# sourceMappingURL=Select.test.js.map