"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSelectStyles = void 0;
const react_make_styles_1 = require("@fluentui/react-make-styles");
const index_1 = require("../TextField/index");
const useSelectState_1 = require("./useSelectState");
const useSelectWrapperStyles = react_make_styles_1.makeStyles({
    enabled: {
        cursor: 'pointer',
    },
    disabled: {
        cursor: 'not-allowed',
    },
});
const useSelectButtonStyles = react_make_styles_1.makeStyles({
    selectButton: (theme) => ({
        position: 'relative',
        margin: '0px',
        padding: '0px',
        height: '100%',
        width: '100%',
        paddingLeft: '10px',
        paddingRight: '10px',
        background: 'none',
        display: 'flex',
        justifyContent: 'left',
        alignItems: 'center',
        boxSizing: 'border-box',
        fontSize: '18px',
        userSelect: 'none',
        fontFamily: theme.fonts.fontFamily.base,
        outline: 'none',
    }),
});
const useListStyles = react_make_styles_1.makeStyles({
    list: (theme) => ({
        position: 'absolute',
        listStyleType: 'none',
        padding: '10px 0px',
        margin: '0px',
        width: '100%',
        borderRadius: '0px 0px 5px 5px',
        background: 'white',
        boxShadow: '0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)',
        transition: 'height 1s cubic-bezier(0.33, 0.0, 0.67, 1)',
        zIndex: '1000',
        [`& .${useSelectState_1.listClassName}`]: {
            height: '38px',
            padding: '0px 10px 0px 10px',
            display: 'flex',
            justifyContent: 'left',
            alignItems: 'center',
            fontFamily: theme.fonts.fontFamily.base,
            fontSize: '18px',
            userSelect: 'none',
            outline: 'none',
        },
    }),
    activeListItem: (theme) => ({
        [`& .active`]: {
            background: theme.palette.brandBackground,
            ':hover': {
                background: theme.palette.brandBackgroundHover,
            },
            ':active': {
                background: theme.palette.brandBackgroundPressed,
            },
            ':focus-within': {
                background: theme.palette.brandBackground,
                ':hover': {
                    background: theme.palette.brandBackgroundHover,
                },
                ':active': {
                    background: theme.palette.brandBackgroundPressed,
                },
            },
        },
    }),
    inactiveListItem: (theme) => ({
        [`& .inactive`]: {
            background: 'white',
            ':hover': {
                background: theme.palette.brandForegroundHover,
            },
            ':active': {
                background: theme.palette.brandForegroundPressed,
            },
            ':focus-within': {
                background: theme.palette.brandForegroundPressed,
            },
        },
    }),
    enabled: {
        [`& .${useSelectState_1.listClassName}`]: {
            cursor: 'pointer',
        },
    },
    disabled: {
        [`& .${useSelectState_1.listClassName}`]: {
            cursor: 'not-allowed',
        },
    },
});
const useSelectInputStyles = react_make_styles_1.makeStyles({
    input: {
        display: 'none',
    },
});
const useSelectStyles = (state) => {
    const rootStyles = index_1.useRootStyles();
    const textFieldBorderStyles = index_1.useTextFieldBorderStyles();
    const inputStyles = index_1.useInputStyles();
    const labelStyles = index_1.useLabelStyles();
    const listStyles = useListStyles();
    const selectWrapperStyles = useSelectWrapperStyles();
    const selectButtonStyles = useSelectButtonStyles();
    const textFieldLegendStyles = index_1.useTextFieldLegendStyles();
    const textFieldWrapperStyles = index_1.useTextFieldWrapperStyles();
    const helperTextStyles = index_1.useHelperTextStyles();
    const prefixSuffixStyles = index_1.useSuffixPrefixStyles();
    const selectInputStyles = useSelectInputStyles();
    state.root.className = react_make_styles_1.mergeClasses(rootStyles.root, rootStyles.focusIndicator, !state.error && !state.disabled && rootStyles.inputFocus, state.label !== undefined && rootStyles[state.appearance], state.root.className);
    state.textFieldSuffix.className = react_make_styles_1.mergeClasses(prefixSuffixStyles.container, (state.appearance === 'filled' || state.appearance === 'standard') && inputStyles.lowerTextAlignment, state.disabled && prefixSuffixStyles.disabled, state.textFieldSuffix.className);
    state.textFieldPrefix.className = react_make_styles_1.mergeClasses(prefixSuffixStyles.container, (state.appearance === 'filled' || state.appearance === 'standard') && prefixSuffixStyles.lowerTextAlignment, state.disabled && prefixSuffixStyles.disabled, state.textFieldPrefix.className);
    state.selectButton.className = react_make_styles_1.mergeClasses(selectButtonStyles.selectButton, (state.appearance === 'filled' || state.appearance === 'standard') && inputStyles.lowerTextAlignment, state.disabled && inputStyles.disabled, state.selectButton.className);
    state.list.className = react_make_styles_1.mergeClasses(listStyles.list, listStyles.inactiveListItem, listStyles.activeListItem, state.disabled ? listStyles.disabled : listStyles.enabled, state.list.className);
    state.input.className = react_make_styles_1.mergeClasses(selectInputStyles.input, state.input.className);
    state.textFieldWrapper.className = react_make_styles_1.mergeClasses(textFieldWrapperStyles.wrapper, state.disabled ? selectWrapperStyles.disabled : selectWrapperStyles.enabled, state.textFieldWrapper.className);
    state.textFieldHelperText.className = react_make_styles_1.mergeClasses(helperTextStyles.helperText, state.disabled ? helperTextStyles.disabled : helperTextStyles.enabled, state.error && helperTextStyles.error, state.textFieldHelperText.className);
    state.textFieldBorder.className = react_make_styles_1.mergeClasses(index_1.textFieldBorderClassName, textFieldBorderStyles.textFieldBorder, textFieldBorderStyles[state.appearance], state.disabled && textFieldBorderStyles.disabled, state.error && textFieldBorderStyles.error, state.textFieldBorder.className);
    state.textFieldLabel.className = react_make_styles_1.mergeClasses(index_1.labelClassName, labelStyles.label, !state.disabled ? labelStyles.enabled : labelStyles.disabled, state.error && labelStyles.error, labelStyles[state.appearance], state.textFieldLabel.className);
    state.textFieldLegend.className = react_make_styles_1.mergeClasses(index_1.legendClassName, textFieldLegendStyles.textFieldLegend, textFieldLegendStyles.active, state.textFieldLegend.className);
};
exports.useSelectStyles = useSelectStyles;
//# sourceMappingURL=useSelectStyles.js.map