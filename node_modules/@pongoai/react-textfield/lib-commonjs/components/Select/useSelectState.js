"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSelectState = exports.listClassName = void 0;
const React = __importStar(require("react"));
const react_utilities_1 = require("@fluentui/react-utilities");
const defaultIcons_1 = require("./defaultIcons");
const react_positioning_1 = require("@fluentui/react-positioning");
exports.listClassName = 'pongoai-Select-list-option';
const getKeyDownValue = (ev, currentValue, max) => {
    switch (ev.key) {
        case 'ArrowDown': {
            ev.preventDefault();
            return react_utilities_1.clamp(currentValue + 1, 0, max);
        }
        case 'ArrowUp': {
            ev.preventDefault();
            return react_utilities_1.clamp(currentValue - 1, 0, max);
        }
        case 'Home': {
            ev.preventDefault();
            return 0;
        }
        case 'End': {
            ev.preventDefault();
            return max;
        }
    }
    return react_utilities_1.clamp(currentValue, 0, max);
};
const useSelectState = (state) => {
    const { defaultValue, options = [], value, helperText, suffix, prefix, label, onChange, error, disabled, required, } = state;
    const { id } = state.root;
    const labelId = label ? react_utilities_1.useId('select-label', id) : undefined;
    const helperTextId = helperText ? react_utilities_1.useId('select-label', id) : undefined;
    const [visible, { setFalse: setVisibleFalse, toggle: toggleVisible }] = react_utilities_1.useBoolean(false);
    const [currentOptionIndex, setCurrentOptionIndex] = React.useState(0);
    const [currentValue, setCurrentValue] = react_utilities_1.useControllableState({
        defaultState: defaultValue,
        state: value,
        initialState: '',
    });
    const optionItemsRef = React.useRef([]);
    const selectButtonRef = React.useRef(null);
    const textFieldWrapperRef = React.useRef(null);
    const internalState = React.useRef({
        focusedValue: 0,
    });
    const popperOptions = {
        position: 'below',
        visible: visible,
    };
    const { targetRef, containerRef } = react_positioning_1.usePopper(popperOptions);
    const updateValue = react_utilities_1.useEventCallback((incomingValue, ev) => {
        const clampedValue = react_utilities_1.clamp(incomingValue, 0, options.length - 1);
        const optionValue = options[clampedValue].value;
        internalState.current.focusedValue = clampedValue;
        setCurrentValue(optionValue);
        setVisibleFalse();
        setCurrentOptionIndex(clampedValue);
        console.log(optionValue);
        onChange?.(ev, { value: optionValue });
    });
    const createOptions = React.useMemo(() => {
        const items = [];
        for (let i = 0; i < options.length; i++) {
            const value = options[i].value;
            const label = options[i].label;
            const onOptionClick = (ev) => {
                updateValue(i, ev);
                setVisibleFalse();
            };
            const onOptionKeyUp = (ev) => {
                ev.stopPropagation();
                switch (ev.key) {
                    case 'Escape': {
                        selectButtonRef.current.focus();
                        setVisibleFalse();
                        break;
                    }
                    case ' ': {
                        selectButtonRef.current.focus();
                        updateValue(i, ev);
                        break;
                    }
                    case 'Enter': {
                        updateValue(i, ev);
                        selectButtonRef.current.focus();
                        break;
                    }
                }
            };
            const onOptionKeyDown = (ev) => {
                ev.stopPropagation();
                // ev.preventDefault();
                const incomingValue = getKeyDownValue(ev, internalState.current.focusedValue, options.length - 1);
                internalState.current.focusedValue = incomingValue;
                optionItemsRef.current[internalState.current.focusedValue].current.focus();
            };
            optionItemsRef.current[i] = React.createRef();
            items.push(React.createElement("li", { className: options[i].value === options[currentOptionIndex].value
                    ? exports.listClassName + ' active'
                    : exports.listClassName + ' inactive', ref: optionItemsRef.current[i], role: "option", "aria-selected": options[i].value === options[currentOptionIndex].value, "data-value": value, onClick: onOptionClick, onKeyUp: onOptionKeyUp, onKeyDown: onOptionKeyDown, key: i, tabIndex: -1 }, label));
        }
        return items;
    }, [options, currentOptionIndex]);
    const onKeyUp = (ev) => {
        ev.stopPropagation();
        ev.preventDefault();
        switch (ev.key) {
            case 'Escape': {
                setVisibleFalse();
                break;
            }
            case ' ': {
                toggleVisible();
                break;
            }
            case 'Enter': {
                toggleVisible();
                break;
            }
        }
    };
    const onBlur = React.useCallback(ev => {
        // Call if no inner child element maintains focus.
        !ev.currentTarget.contains(ev.relatedTarget) && setVisibleFalse();
    }, [setVisibleFalse]);
    React.useEffect(() => {
        visible && optionItemsRef.current[internalState.current.focusedValue].current.focus();
    }, [visible]);
    const listStyles = {
        opacity: visible ? 1 : 0,
    };
    // TextField wrapper props
    !disabled && (state.textFieldWrapper.onClick = toggleVisible);
    state.textFieldWrapper.ref = react_utilities_1.useMergedRefs(state.textFieldWrapper.ref, textFieldWrapperRef, targetRef);
    // Prefix Props
    prefix
        ? (state.textFieldPrefix.children = prefix)
        : (state.textFieldPrefix.children = React.createElement(defaultIcons_1.Chevron, { visible: visible, disabled: disabled }));
    // Suffix Props
    suffix && (state.textFieldSuffix.children = suffix);
    // Root Props
    state.root.onBlur = onBlur;
    // Border Props
    state.textFieldBorder['aria-hidden'] = true;
    // Label Props
    label && (state.textFieldLabel.children = label);
    label && (state.textFieldLabel.id = labelId);
    // Helper Text Props
    helperText && (state.textFieldHelperText.children = helperText);
    helperText && (state.textFieldHelperText.id = helperTextId);
    // Legend Props
    label && (state.textFieldLegend.children = label);
    // List Props
    state.list.children = visible && createOptions;
    state.list.style = listStyles;
    state.list.ref = react_utilities_1.useMergedRefs(state.list.ref, containerRef);
    // Select Props
    state.selectButton.children = options[currentOptionIndex]?.label;
    state.selectButton.ref = react_utilities_1.useMergedRefs(state.selectButton.ref, selectButtonRef);
    state.selectButton.role = 'combobox';
    state.selectButton.tabIndex = disabled ? -1 : 0;
    !disabled && (state.selectButton.onKeyUp = onKeyUp);
    state.selectButton['aria-haspopup'] = 'listbox';
    state.selectButton['aria-expanded'] = visible;
    required && (state.selectButton['aria-required'] = required);
    disabled && (state.selectButton['aria-disabled'] = disabled);
    error && (state.selectButton['aria-invalid'] = error);
    helperText && (state.selectButton['aria-describedby'] = helperTextId);
    label && (state.selectButton['aria-labelledby'] = labelId);
    // Input Props
    state.input.tabIndex = -1;
    state.input.value = currentValue;
    return state;
};
exports.useSelectState = useSelectState;
//# sourceMappingURL=useSelectState.js.map