"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const TextField_1 = require("./TextField");
const isConformant_1 = require("../../common/isConformant");
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_utilities_1 = require("@fluentui/react-utilities");
//credit to https://github.com/microsoft/fluentui for being the base of this set of tests
describe('TextField', () => {
    let renderedComponent;
    let textfieldRef = react_1.default.createRef();
    isConformant_1.isConformant({
        Component: TextField_1.TextField,
        displayName: 'TextField',
        testOptions: {
            'make-styles-overrides-win': {
                callCount: 1,
            },
        },
    });
    beforeEach(() => {
        react_utilities_1.resetIdsForTests();
    });
    afterEach(() => {
        textfieldRef = react_1.default.createRef();
        if (renderedComponent) {
            renderedComponent.unmount();
            renderedComponent = undefined;
        }
    });
    it('respects id prop', () => {
        renderedComponent = react_2.render(react_1.default.createElement(TextField_1.TextField, { id: "testing-id", "data-testid": "textfield" }, "Default textfield"));
        expect(renderedComponent.getByTestId('textfield').id).toEqual('testing-id');
    });
    it('defaults to empty', () => {
        react_2.render(react_1.default.createElement(TextField_1.TextField, { input: { ref: textfieldRef } }, "Default textfield"));
        expect(textfieldRef.current?.value).toBe('');
    });
    it('respects defaultValue prop', () => {
        react_2.render(react_1.default.createElement(TextField_1.TextField, { input: { ref: textfieldRef }, defaultValue: "default" }, "Default textfield"));
        expect(textfieldRef.current?.value).toBe('default');
    });
    it('calls onChange with the correct value', () => {
        const eventHandler = jest.fn();
        react_2.render(react_1.default.createElement(TextField_1.TextField, { input: { ref: textfieldRef }, onChange: eventHandler, "data-testid": "textfield" }));
        const input = react_2.screen.getByRole('textbox');
        expect(eventHandler).toBeCalledTimes(0);
        react_2.fireEvent.change(input, { target: { value: 'changed' } });
        expect(eventHandler).toBeCalledTimes(2);
        expect(textfieldRef.current?.value).toBe('changed');
    });
    it('does not call onChange when disabled', () => {
        const eventHandler = jest.fn();
        react_2.render(react_1.default.createElement(TextField_1.TextField, { disabled: true, input: { ref: textfieldRef }, onChange: eventHandler, "data-testid": "textfield" }));
        const input = react_2.screen.getByRole('textbox');
        expect(eventHandler).toBeCalledTimes(0);
        user_event_1.default.type(input, 'changed');
        expect(eventHandler).toBeCalledTimes(0);
        expect(textfieldRef.current?.value).toBe('');
    });
    it('only accepts numbers when configured to number', () => {
        const eventHandler = jest.fn();
        react_2.render(react_1.default.createElement(TextField_1.TextField, { number: true, input: { ref: textfieldRef }, onChange: eventHandler, "data-testid": "textfield" }));
        const input = react_2.screen.getByRole('spinbutton');
        expect(eventHandler).toBeCalledTimes(0);
        user_event_1.default.type(input, '123abc123abc');
        expect(eventHandler).toBeCalledTimes(12);
        expect(textfieldRef.current?.value).toBe('123123');
    });
});
//# sourceMappingURL=TextField.test.js.map