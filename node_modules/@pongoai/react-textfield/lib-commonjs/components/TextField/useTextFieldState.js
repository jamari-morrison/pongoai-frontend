"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTextFieldState = void 0;
const react_utilities_1 = require("@fluentui/react-utilities");
const useTextFieldState = (state) => {
    const { defaultValue, value, autocomplete, disabled, helperText, required, error, placeholder, label, prefix, suffix, number, onChange, } = state;
    const { id } = state.root;
    const inputRef = react_utilities_1.useMergedRefs(state.input.ref);
    const labelId = label ? react_utilities_1.useId('textField-label', id) : undefined;
    const helperTextId = helperText ? react_utilities_1.useId('textField-label', id) : undefined;
    const [currentValue, setCurrentValue] = react_utilities_1.useControllableState({
        defaultState: defaultValue,
        state: value,
        initialState: '',
    });
    /**
     * Updates the controlled `currentValue` to the new `incomingValue` and clamps it.
     */
    const updateValue = react_utilities_1.useEventCallback((incomingValue, ev) => {
        onChange?.(ev, { value: incomingValue });
        setCurrentValue(incomingValue);
    });
    const onInputChange = (ev) => {
        updateValue(ev.target.value, ev);
    };
    const onTextFieldWrapperClick = () => inputRef.current?.focus();
    suffix && (state.textFieldWrapper.onClick = onTextFieldWrapperClick);
    // Prefix Props
    prefix && (state.textFieldPrefix.children = prefix);
    // Suffix Props
    suffix && (state.textFieldSuffix.children = suffix);
    // Border Props
    state.textFieldBorder['aria-hidden'] = true;
    // Label Props
    label && (state.textFieldLabel.children = label);
    label && (state.textFieldLabel.htmlFor = labelId);
    // Helper Text Props
    helperText && (state.textFieldHelperText.children = helperText);
    helperText && (state.textFieldHelperText.id = helperTextId);
    // Legend Props
    label && (state.textFieldLegend.children = label);
    // Input Props
    state.input.value = currentValue;
    state.input.onChange = onInputChange;
    state.input.autoComplete = autocomplete;
    state.input.disabled = disabled;
    helperText && (state.input['aria-describedby'] = helperTextId);
    error && (state.input['aria-invalid'] = error);
    label && (state.input.id = labelId);
    required && (state.input.required = required);
    placeholder && (state.input.placeholder = placeholder);
    state.input.ref = inputRef;
    return state;
};
exports.useTextFieldState = useTextFieldState;
//# sourceMappingURL=useTextFieldState.js.map