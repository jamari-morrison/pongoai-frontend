"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePasswordState = void 0;
const React = __importStar(require("react"));
const react_utilities_1 = require("@fluentui/react-utilities");
const react_button_1 = require("@pongoai/react-button");
const defaultIcons_1 = require("./defaultIcons");
const usePasswordState = (state) => {
    const { defaultValue, value, autocomplete, disabled, helperText, required, error, placeholder, label, onChange } = state;
    const { id } = state.root;
    const inputRef = react_utilities_1.useMergedRefs(state.input.ref);
    const labelId = label ? react_utilities_1.useId('password-label', id) : undefined;
    const helperTextId = helperText ? react_utilities_1.useId('password-label', id) : undefined;
    const [isPasswordVisible, { toggle: passwordVisibility }] = react_utilities_1.useBoolean(false);
    const [currentValue, setCurrentValue] = react_utilities_1.useControllableState({
        defaultState: defaultValue,
        state: value,
        initialState: '',
    });
    /**
     * Updates the controlled `currentValue` to the new `incomingValue` and clamps it.
     */
    const updateValue = react_utilities_1.useEventCallback((incomingValue, ev) => {
        onChange?.(ev, { value: incomingValue });
        setCurrentValue(incomingValue);
    });
    const onInputChange = (ev) => {
        updateValue(ev.target.value, ev);
    };
    const onButtonPointerDown = () => passwordVisibility();
    //  Prefix Props
    !state.disabled &&
        (state.showIconWrapper.children = (React.createElement(react_button_1.Button, { className: "pongoai-Password-show-button", appearance: "subtle", shape: "circular", onClick: onButtonPointerDown }, isPasswordVisible ? React.createElement(defaultIcons_1.PasswordHideIcon, null) : React.createElement(defaultIcons_1.PasswordShowIcon, null))));
    // Border Props
    state.textFieldBorder['aria-hidden'] = true;
    // Label Props
    label && (state.textFieldLabel.children = label);
    label && (state.textFieldLabel.htmlFor = labelId);
    // Helper Text Props
    helperText && (state.textFieldHelperText.children = helperText);
    helperText && (state.textFieldHelperText.id = helperTextId);
    // Legend Props
    label && (state.textFieldLegend.children = label);
    // Input Props
    state.input.value = currentValue;
    state.input.onChange = onInputChange;
    state.input.autoComplete = autocomplete;
    state.input.disabled = disabled;
    state.input.type = isPasswordVisible ? 'text' : 'password';
    helperText && (state.input['aria-describedby'] = helperTextId);
    error && (state.input['aria-invalid'] = error);
    label && (state.input.id = labelId);
    required && (state.input.required = required);
    placeholder && (state.input.placeholder = placeholder);
    state.input.ref = inputRef;
    return state;
};
exports.usePasswordState = usePasswordState;
//# sourceMappingURL=usePasswordState.js.map